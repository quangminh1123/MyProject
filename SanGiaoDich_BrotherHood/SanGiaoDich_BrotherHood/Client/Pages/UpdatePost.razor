@page "/updatepost/{ProductId:int}"

@using SanGiaoDich_BrotherHood.Shared.Models
@using SanGiaoDich_BrotherHood.Shared.Dto
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3 class="text-center text-success mb-4">Cập nhật sản phẩm</h3>

<div class="container">
    <!-- Hình ảnh sản phẩm (đưa lên đầu và cho phép mở modal phóng to ảnh) -->
    <div class="form-group mb-3">
        <label>Hình ảnh sản phẩm:</label>
        <div class="d-flex flex-wrap mb-3">
            @if (images != null && images.Any())
            {
                @foreach (var image in images)
                {
                    <div class="image-item m-2" style="position: relative;">
                        <img src="@image.Image" alt="Ảnh sản phẩm" class="rounded image-thumbnail" style="width: 150px; height: 150px; object-fit: cover;" @onclick="() => OpenImageModal(image.Image)" />
                    </div>
                }
            }
            else
            {
                <p class="text-muted">Không có hình ảnh cho sản phẩm này.</p>
            }
        </div>
    </div>

    <!-- Tên sản phẩm (không cho phép chỉnh sửa) -->
    <div class="form-group mb-3">
        <label for="ProductName">Tên sản phẩm:</label>
        <input type="text" class="form-control" placeholder="Tên sản phẩm" id="ProductName" value="@ProductName" disabled />
    </div>

    <!-- Giá sản phẩm (cho phép chỉnh sửa) -->
    <div class="form-group mb-3">
        <label for="ProductPrice">Giá sản phẩm:</label>
        <input type="number" @bind="ProductPrice" class="form-control" placeholder="Nhập giá sản phẩm" id="ProductPrice" />
    </div>

    <!-- Loại sản phẩm (cho phép chỉnh sửa và chọn sẵn loại của sản phẩm) -->
    <!-- Loại sản phẩm (cho phép chỉnh sửa và chọn sẵn loại của sản phẩm) -->
    <div class="form-group mb-3">
        <label for="ProductCategory">Loại sản phẩm:</label>
        <select @bind="ProductCategoryId" class="form-control" id="ProductCategory">
            <option value="">Chọn loại sản phẩm</option>
            @foreach (var category in categories)
            {
                <option value="@category.IDCategory"
                        selected="@((category.IDCategory == ProductCategoryId) ? "selected" : null)">
                    @category.NameCate
                </option>
            }
        </select>
    </div>

    <!-- Mô tả sản phẩm (vô hiệu hóa) -->
    <div class="form-group mb-3">
        <label for="ProductDescription">Mô tả sản phẩm:</label>
        <textarea class="form-control" id="ProductDescription" rows="4" value="@Description" disabled></textarea>
    </div>

    <!-- Nút cập nhật sản phẩm -->
    <div class="text-center mt-4">
        <button @onclick="UpdateProduct" class="btn btn-success btn-lg">Cập nhật sản phẩm</button>
    </div>

</div>

<!-- Modal để phóng to ảnh -->
@if (!string.IsNullOrEmpty(SelectedImage))
{
    <div class="modal" tabindex="-1" style="display: block;" @onclick="CloseImageModal">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                </div>
                <div class="modal-body">
                    <img src="@SelectedImage" class="img-fluid" alt="Ảnh phóng to" />
                </div>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-4">@errorMessage</div>
}

@code {
    [Parameter] public int ProductId { get; set; }
    private string ProductName { get; set; }
    private decimal ProductPrice { get; set; }
    private int ProductQuantity { get; set; }
    private string Description { get; set; }
    private int ProductCategoryId { get; set; }
    private string errorMessage { get; set; }
    private List<ImageProduct> images;
    private List<Category> categories = new List<Category>();
    private string SelectedImage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCategories(); // Tải danh sách loại sản phẩm
            var product = await GetProductById(ProductId);

            if (product != null)
            {
                ProductName = product.Name;
                ProductPrice = product.Price;
                ProductQuantity = product.Quantity;
                ProductCategoryId = product.IDCategory;
                Description = product.Description;
                images = await GetImagesByProductId(product.IDProduct);
            }
            else
            {
                errorMessage = "Không tìm thấy sản phẩm";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải thông tin sản phẩm: {ex.Message}";
        }
    }

    private async Task<Product> GetProductById(int id)
    {
        var response = await HttpClient.GetAsync($"api/product/GetProductById/{id}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<Product>();
        }
        throw new Exception("Không thể tải dữ liệu sản phẩm");
    }

    private async Task LoadCategories()
    {
        var categoryList = await HttpClient.GetFromJsonAsync<List<Category>>("api/category/GetCategories");
        categories = categoryList ?? new List<Category>();
    }

    private async Task<List<ImageProduct>> GetImagesByProductId(int id)
    {
        var response = await HttpClient.GetAsync($"api/ImageProduct/GetImageProduct/{id}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<List<ImageProduct>>() ?? new List<ImageProduct>();
        }
        else
        {
            errorMessage = "Không thể tải ảnh từ API: " + response.ReasonPhrase;
            return new List<ImageProduct>();
        }
    }

    private async Task UpdateProduct()
    {
        try
        {
            var productDto = new ProductDto
                {
                    Name = ProductName,
                    Price = ProductPrice,
                    Quantity = ProductQuantity,
                    CategoryId = ProductCategoryId,
                    Description = Description
                };

            var response = await HttpClient.PutAsJsonAsync($"api/product/UpdateProduct/{ProductId}", productDto);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/"); // Điều hướng về trang chính hoặc trang danh sách sản phẩm
            }
            else
            {
                errorMessage = $"Cập nhật không thành công: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi cập nhật sản phẩm: {ex.Message}";
        }
    }

    private void OpenImageModal(string imageUrl)
    {
        SelectedImage = imageUrl;
    }

    private void CloseImageModal()
    {
        SelectedImage = null;
    }
}
