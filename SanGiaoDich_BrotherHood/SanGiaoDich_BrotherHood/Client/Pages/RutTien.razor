@using SanGiaoDich_BrotherHood.Shared.Dto
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager
@inject HttpClient http
@inject IJSRuntime jsruntime
@page "/ruttien"

<h3 class="text-center my-4">Rút Tiền</h3>

@if (!IsLoggedIn)
{
    <div class="text-center text-danger">Bạn chưa đăng nhập. Đang chuyển hướng đến trang đăng nhập...</div>
}
else
{
    <div class="text-center mb-3">
        <p class="h5">Số dư tài khoản: <strong>@accountInfo.PreSystem.ToString("N0") VND</strong></p>
    </div>

    <div class="container">
        <form @onsubmit="HandleWithdrawal" class="shadow p-4 bg-light rounded">
            <div class="form-group">
                <label for="amount">Số Tiền:</label>
                <select id="amount" @bind="Withdrawal.Amount" class="form-control" required>
                    <option value="" disabled selected>Chọn số tiền</option>
                    @foreach (var amount in AmountList)
                    {
                        <option value="@amount">@amount.ToString("N0") VND</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="bank">Ngân Hàng:</label>
                <select id="bank" @bind="Withdrawal.Bank" class="form-control" required>
                    <option value="" disabled selected>Chọn ngân hàng</option>
                    @foreach (var bank in BankList)
                    {
                        <option value="@bank">@bank</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="accountNumber">Số Tài Khoản:</label>
                <input id="accountNumber" @bind="Withdrawal.AccountNumber" type="text" class="form-control" placeholder="Nhập số tài khoản" required />
            </div>
            <button type="submit" class="btn btn-primary mt-3">Gửi Yêu Cầu Rút Tiền</button>
        </form>
    </div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-4" role="alert">
            @ErrorMessage
        </div>
    }

    <h3 class="text-center my-4">Danh Sách Yêu Cầu Rút Tiền</h3>

    <div class="container">
        <div class="card shadow-sm mb-4">
            <div class="card-body">
                @if (Withdrawals != null && Withdrawals.Any())
                {
                    <table class="table table-striped">
                        <thead class="thead-light">
                            <tr>
                                <th>Loại Thanh Toán</th>
                                <th>Số Tiền</th>
                                <th>Ngày Tạo</th>
                                <th>Ngân Hàng</th>
                                <th>Trạng Thái</th>
                                <th>Số Tài Khoản</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Withdrawals)
                            {
                                <tr>
                                    <td>@item.PaymentType</td>
                                    <td>@item.Amount.ToString("N0")</td>
                                    <td>@item.CreatedDate.ToString("dd/MM/yyyy")</td>
                                    <td>@item.Bank</td>
                                    <td>
                                        @item.Status
                                    </td>
                                    <td>@item.AccountNumber</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="text-center text-muted">Không có yêu cầu rút tiền nào.</div>
                }
            </div>
        </div>
    </div>
}

@code {
    private Withdrawal_InfomationDto Withdrawal = new Withdrawal_InfomationDto
        {
            PaymentType = "Rút tiền",
            Status = "Chưa thanh toán",
        };

    private List<Withdrawal_InfomationDto> Withdrawals = new();

    private List<string> BankList = new()
    {
        "Ngân hàng TMCP Ngoại thương Việt Nam (Vietcombank)",
        "Ngân hàng TMCP Công thương Việt Nam (VietinBank)",
        "Ngân hàng TMCP Đầu tư và Phát triển Việt Nam (BIDV)",
        "Ngân hàng TMCP Á Châu (ACB)",
        "Ngân hàng TMCP Kỹ thương Việt Nam (Techcombank)",
        "Ngân hàng TMCP Quân đội (MB Bank)",
        "Ngân hàng TMCP Việt Nam Thịnh Vượng (VPBank)",
        "Ngân hàng TMCP Sài Gòn Thương Tín (Sacombank)",
        "Ngân hàng TMCP Đông Nam Á (SeABank)",
        "Ngân hàng TMCP Quốc tế (VIB)",
        "Ngân hàng TMCP Sài Gòn (SCB)",
        "Ngân hàng Nông nghiệp và Phát triển Nông thôn Việt Nam (Agribank)"
    };

    private List<int> AmountList = new()
    {
        100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000,
        1000000, 2000000, 3000000, 4000000, 5000000
    };

    private string ErrorMessage;

    private async Task HandleWithdrawal()
    {
        try
        {
            // Kiểm tra số dư trước khi gửi yêu cầu rút tiền
            if (accountInfo.PreSystem < (decimal)Withdrawal.Amount)
            {
                ErrorMessage = "Số dư tài khoản không đủ để thực hiện rút tiền.";
                return;
            }

            var withdrawalRequest = new Withdrawal_InfomationDto
                {
                    Amount = Withdrawal.Amount,
                    Bank = Withdrawal.Bank,
                    AccountNumber = Withdrawal.AccountNumber,
                    PaymentType = Withdrawal.PaymentType,
                    Status = Withdrawal.Status
                };

            var response = await http.PostAsJsonAsync("api/payment/withdrawals", withdrawalRequest);
            if (response.IsSuccessStatusCode)
            {
                Withdrawal.Amount = 0;
                Withdrawal.Bank = string.Empty;
                Withdrawal.AccountNumber = string.Empty;

                await LoadWithdrawals();

                if (accountInfo?.UserName != null)
                {
                    var emailRequest = new EmailRequest
                        {
                            To = accountInfo.Email,
                            Subject = "Yêu cầu rút tiền đã được ghi nhận",
                            Body = $"Xin chào {accountInfo.FullName},\n\n" +
                                       $"Yêu cầu rút tiền của bạn đã được ghi nhận với thông tin như sau:\n\n" +
                                       $"- Số tiền: {withdrawalRequest.Amount.ToString("N0")} VND\n" +
                                       $"- Ngân hàng: {withdrawalRequest.Bank}\n" +
                                       $"- Số tài khoản: {withdrawalRequest.AccountNumber}\n\n" +
                                       "Chúng tôi sẽ xử lý yêu cầu của bạn trong thời gian sớm nhất.\n\n" +
                                       "Trân trọng,\nĐội ngũ BrotherHood"
                        };

                    await SendEmail(emailRequest);
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Lỗi: {error}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Exception: {ex.Message}";
        }
    }

    private async Task SendEmail(EmailRequest emailRequest)
    {
        try
        {
            var response = await http.PostAsJsonAsync("api/email/sendemail", emailRequest);
            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.Error.WriteLine($"Email Error: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Exception: {ex.Message}");
        }
    }

    private async Task LoadWithdrawals()
    {
        try
        {
            var allWithdrawals = await http.GetFromJsonAsync<List<Withdrawal_InfomationDto>>("api/payment/withdrawals");
            Withdrawals = allWithdrawals?.Where(w => w.UserName == accountInfo.UserName).ToList();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Exception: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CheckTokenAndLoadAccountInfo();

        if (!IsLoggedIn)
        {
            NavigationManager.NavigateTo("/login", true);
        }
        else
        {
            await LoadWithdrawals();
        }
    }

    private bool isLoading = true;
    private string errorMessage;
    private AccountInfoDto accountInfo;
    private bool IsLoggedIn { get; set; } = false;

    private class AccountInfoDto
    {
        public string UserName { get; set; }
        public decimal PreSystem { get; set; }
        public string FullName { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public string Gender { get; set; }
        public DateTime? Birthday { get; set; }
        public bool IsDelete { get; set; }
        public DateTime TimeBan { get; set; }
        public string ImageAccount { get; set; }
    }

    public class EmailRequest
    {
        public string To { get; set; }
        public string Subject { get; set; }
        public string Body { get; set; }
    }

    private async Task CheckTokenAndLoadAccountInfo()
    {
        var token = await jsruntime.InvokeAsync<string>("localStorage.getItem", "token");
        if (!string.IsNullOrEmpty(token))
        {
            IsLoggedIn = true;
            var response = await http.GetFromJsonAsync<AccountInfoDto>("api/user/GetMyInfo");
            if (response != null)
            {
                accountInfo = response;
            }
        }
    }
}
