@* <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
<script src="js/quillHelper.js"></script> *@

<link href="/css/Post.css" rel="stylesheet" />
@page "/post"
@using System.ComponentModel.DataAnnotations
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Firebase.Storage
@using SanGiaoDich_BrotherHood.Shared.Dto
@using SanGiaoDich_BrotherHood.Shared.Models
@using System.IO
@using System.Text.Json
@inject NavigationManager NavigationManager
<style>
	.loading-overlay {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.5);
		color: white;
		display: flex;
		justify-content: center;
		align-items: center;
		z-index: 1000;
	}

	.spinner {
		border: 4px solid rgba(255, 255, 255, 0.3);
		border-top: 4px solid white;
		border-radius: 50%;
		width: 50px;
		height: 50px;
		animation: spin 2s linear infinite;
	}

	.text-danger {
		color: #dc3545;
		font-size: 0.9rem;
		text-shadow: 0px 1px 2px rgba(0, 0, 0, 0.2);
	}


	.image-preview img {
		max-width: 100%;
		max-height: 100%;
		object-fit: cover;
	}

	input[type=file] {
		width: 350px;
		max-width: 100%;
		color: #444;
		padding: 3px;
		background: #fff;
		border-radius: 8px;
		border: 1px solid #555;
	}

		input[type=file]::file-selector-button {
			margin-right: 15px;
			border: none;
			background: #084cdf;
			padding: 5px 15px;
			border-radius: 8px;
			color: #fff;
			cursor: pointer;
			transition: background .2s ease-in-out;
		}


			input[type=file]::file-selector-button:hover {
				background: #0d45a5;
			}

	.image-preview {
		position: relative;
		width: 100%;
		max-width: 350px;
		height: auto;
		border: 1px solid #ccc;
		border-radius: 8px;
		overflow: hidden;
		background-color: #f9f9f9;
		box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
		display: flex;
		align-items: center;
		justify-content: center;
	}

		.image-preview img {
			max-width: 100%;
			max-height: 100%;
			object-fit: cover;
			border-radius: 4px;
			transition: transform 0.3s ease, box-shadow 0.3s ease;
		}

			.image-preview img:hover {
				transform: scale(1.05);
				box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
			}
	/* Màu đỏ cho nhấn mạnh */
	.highlight-red {
		color: #d9534f;
		font-weight: bold;
		background-color: #f8d7da;
		padding: 2px 4px;
		border-radius: 3px;
	}

	/* Màu xanh dương cho tiêu đề */
	.highlight-blue {
		color: #0275d8;
		font-weight: bold;
		text-decoration: underline;
	}


	.highlight-yellow {
		background-color: #fff3cd;
		padding: 2px 4px;
		border-radius: 3px;
	}

	.modal-dialog.modal-lg {
		max-width: 90%;
	}

	.modal-body {
		max-height: 500px;
		overflow-y: auto;
		padding-right: 15px;
	}


	.modal-header h5 {
		color: #0275d8;
		font-weight: bold;
		font-size: 18px;
	}

	.modal-body {
		font-size: 16px;
		line-height: 1.6;
		color: #333;
	}

		.modal-body ul {
			list-style-type: disc;
			margin-left: 20px;
		}


	.modal-footer button {
		padding: 10px 20px;
	}

	.card.priority-option {
		cursor: pointer;
		transition: box-shadow 0.3s ease;
	}

		.card.priority-option:hover {
			box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
		}

		.card.priority-option.selected {
			border-color: #28a745;
			box-shadow: 0 0 10px rgba(40, 167, 69, 0.5);
		}

</style>
<div class="container-fluid">
	<ul class="breadcrumb">
		<li class="breadcrumb-item"><a href="#"><i class="bi bi-house"></i> Trang chủ</a></li>
		<li class="breadcrumb-item"><a href="#">Đăng sản phẩm</a></li>
	</ul>
</div>
<style>


</style>

@if (isLoading)
{
	<div class="loading-overlay">
		<div class="spinner"></div>
		<p>Đang xử lý, vui lòng đợi...</p>
	</div>
}

<div class="container">
	<div class="row">
		<div class="col-md-6">
			<div class="form-group mb-3">
				<div class="row">
					@for (int i = 0; i < selectedImageCount; i++)
					{
						@if (i < 4) // Chỉ hiển thị 4 ảnh đầu tiên
						{
							<div class="col-md-6 mb-2">
								<div class="image-preview border d-flex align-items-center justify-content-center" style="height: 200px;">
									@if (selectedFiles[i] != null)
									{
										<img src="@selectedFiles[i].DataUrl" class="img-fluid" alt="Hình ảnh sản phẩm" />
									}
									else
									{
										<span class="placeholder-text">Chưa có hình ảnh</span>
									}
								</div>
							</div>
						}
						else
						{
							<div class="col-md-6 mb-2">
								<div class="image-preview border d-flex align-items-center justify-content-center" style="height: 200px;">
									@if (selectedFiles[i] != null)
									{
										<img src="@selectedFiles[i].DataUrl" class="img-fluid" alt="Hình ảnh sản phẩm" />
									}
									else
									{
										<span class="placeholder-text">Chưa có hình ảnh</span>
									}
								</div>
							</div>
						}
					}
				</div>

				<div class="row mt-2">
					<div class="col-md-12">
						<span>
							Xem quy định về
							<a role="button" @onclick="OpenPolicyModal" class="policy-link">
								<i class="fas fa-info-circle"></i> Cách chụp ảnh và quay sản phẩm
							</a>
						</span>
					</div>
				</div>

				<!-- Modal -->
				@if (IsPolicyModalVisible)
				{
					<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
						<div class="modal-dialog modal-lg">
							<div class="modal-content">
								<div class="modal-header">
									<h5 class="modal-title" id="policyModalLabel">Chính Sách Đăng Ảnh và Bài Viết</h5>
									<button type="button" class="btn-close" @onclick="ClosePolicyModal" aria-label="Close"></button>
								</div>
								<div class="modal-body">
									<p>
										<span class="highlight-red">Chúng tôi hiểu rằng điều quan trọng đối với BrotherHood</span> là phải trở thành nơi mà mọi người có thể cảm thấy tự tin để giao tiếp, nhưng chúng tôi cũng biết rằng cần phải xem trọng vai trò của bản thân trong việc ngăn chặn việc lạm dụng dịch vụ của mình. Đó là lý do <span class="highlight-red">BrotherHood phát triển Tiêu chuẩn cộng đồng</span> để cung cấp cho người dùng những nguyên tắc về nội dung được phép và không được phép trên BrotherHood.
									</p>
									<h6 class="highlight-blue">Nội dung có khả năng vi phạm Tiêu chuẩn cộng đồng:</h6>
									<ul>
										<li class="highlight-yellow">Nội dung được tạo và phân phối bằng tài khoản giả.</li>
										<li class="highlight-yellow">Nội dung chứa từ/cụm từ đã được xác định là gây thù ghét.</li>
										<li class="highlight-yellow">Nội dung có thể khiêu khích hoặc tạo điều kiện cho tình trạng bạo lực nghiêm trọng.</li>
										<li>Hành vi bắt nạt và quấy rối.</li>
										<li>Spam, hình ảnh phản cảm, hoạt động tình dục và ảnh khỏa thân người lớn.</li>
										<li>Bài viết mua bán, giao dịch hoặc quảng cáo hàng hóa hoặc dịch vụ bị hạn chế.</li>
									</ul>
									<h6 class="highlight-blue">Nội dung trên lằn ranh Tiêu chuẩn cộng đồng:</h6>
									<ul>
										<li class="highlight-yellow">Ảnh khỏa thân người lớn và hoạt động tình dục trên lằn ranh.</li>
										<li>Nội dung bạo lực và phản cảm trên lằn ranh.</li>
										<li>Hành vi sắp chạm ngưỡng bắt nạt & quấy rối, ngôn từ gây thù ghét và bạo lực & khích nộ.</li>
										<li class="highlight-yellow">Nội dung đăng trong các nhóm liên quan đến hàng hóa thuộc diện kiểm soát.</li>
									</ul>
									<h6 class="highlight-blue">Nguyên tắc đối với bài viết có mức độ lan truyền đáng ngờ:</h6>
									<p>
										<span class="highlight-red">Chúng tôi muốn đảm bảo rằng nội dung mọi người thấy trên BrotherHood</span> đến từ nguồn xác thực và không vi phạm chính sách của chúng tôi. Chúng tôi có thể tạm thời hạn chế phân phối bài viết có mức độ phân phối cao đột biến cho đến khi người đăng xác minh danh tính.
									</p>
									<h6 class="highlight-blue">Nguyên tắc đối với người nhiều lần vi phạm chính sách:</h6>
									<p>
										<span class="highlight-red">Những người nhiều lần vi phạm</span> việc đăng nội dung lên trang cá nhân, Trang hoặc Nhóm sẽ bị xử lý, đặc biệt là các tài khoản được tạo để né tránh chính sách.
									</p>
								</div>
								<div class="modal-footer">
									<button type="button" class="btn btn-secondary" @onclick="ClosePolicyModal">Đóng</button>
									<button type="button" class="btn btn-primary" @onclick="ClosePolicyModal">Đồng ý và Tiếp tục</button>
								</div>
							</div>
						</div>
					</div>
				}


				<div class="row mt-2">
					<div class="col-md-12 d-flex align-items-center justify-content-center">
						<InputFile OnChange="HandleFileSelected" multiple accept="image/*" />
					</div>
				</div>
			</div>
		</div>

		<div class="col-md-6">
			<div class="row">
				<!-- Tên sản phẩm -->
				<div class="col-md-6 mb-3">
					<label for="ProductName"><i class="fas fa-tag"></i> Tên sản phẩm:</label>
					<input type="text" @bind="ProductName" class="form-control" placeholder="Nhập tên sản phẩm" id="ProductName" />
					@if (!string.IsNullOrWhiteSpace(ProductNameError))
					{
						<div class="text-danger">@ProductNameError</div>
					}
				</div>

				<!-- Loại sản phẩm -->
				<div class="col-md-6 mb-3">
					<label for="ProductCategory"><i class="fas fa-box"></i> Loại sản phẩm:</label>
					<select @bind="ProductCategoryId" class="form-control" id="ProductCategory">
						<option value="">Chọn loại sản phẩm</option>
						@foreach (var category in categories)
						{
							<option value="@category.IDCategory">@category.NameCate</option>
						}

					</select>
					@if (!string.IsNullOrWhiteSpace(ProductCategoryError))
					{
						<div class="text-danger">@ProductCategoryError</div>
					}
				</div>

				<!-- Giá sản phẩm -->
				<div class="col-md-6 mb-3">
					<label for="ProductPrice">
						<img src="/AnhGiaoDien/business.png" style="width:16px;" /> Giá sản phẩm:
					</label>
					<input type="number" @bind="ProductPrice" class="form-control" placeholder="Nhập giá sản phẩm" id="ProductPrice" />
					@if (!string.IsNullOrWhiteSpace(ProductPriceError))
					{
						<div class="text-danger">@ProductPriceError</div>
					}
				</div>

				<!-- Số lượng sản phẩm -->
				<div class="col-md-6 mb-3">
					<label for="ProductQuantity"><i class="fas fa-sort-numeric-up"></i> Số lượng sản phẩm muốn bán:</label>
					<input type="number" @bind="ProductQuantity" class="form-control" placeholder="Nhập số lượng sản phẩm" id="ProductQuantity" />
					@if (!string.IsNullOrWhiteSpace(ProductQuantityError))
					{
						<div class="text-danger">@ProductQuantityError</div>
					}
				</div>
			</div>

			<div class="mb-3">
				<div class="row">
					<div class="col-md-6">
						<label class="form-label">Chọn mức độ ưu tiên</label>
					</div>
					<div class="col-md-6">
					</div>
				</div>

				<div class="row g-2">
					@foreach (var priority in new[] { "Phổ thông", "Ưu tiên" })
					{
						<div class="col-md-6">
							<div class="card priority-option"
								 style="@(ProrityLevel == priority ? "border-color: #28a745; box-shadow: 0 0 10px rgba(40, 167, 69, 0.5);" : "")"
								 @onclick="() => SelectPriority(priority)">
								<div class="card-body text-center">
									<span class="h5 mb-0">@priority</span>
									<div class="mt-2">
										@if (priority == "Phổ thông")
										{
											<span class="text-muted">Giá: 25,000 VNĐ</span>
										}
										else if (priority == "Ưu tiên")
										{
											<span class="text-muted">Giá: 50,000 VNĐ</span>
										}
									</div>
								</div>
							</div>
						</div>
					}
					@if (!string.IsNullOrWhiteSpace(ProrityLevelError))
					{
						<div class="text-danger">@ProrityLevelError</div>
					}
				</div>
			</div>


			<!-- Mô tả sản phẩm -->
			<div class="form-group">
				<label for="ProductDescription"><i class="fas fa-info-circle"></i> Mô tả sản phẩm chi tiết:</label>
				<div id="editor"></div>

@* 				<textarea @bind="Description" class="form-control" id="ProductDescription" rows="7" style="display: none;" placeholder="Nhập mô tả chi tiết về sản phẩm..."></textarea>
 *@				@if (!string.IsNullOrWhiteSpace(ProductDescriptionError))
				{
					<div class="text-danger">@ProductDescriptionError</div>
				}
				<small class="form-text text-muted">
					<i class="fas fa-lightbulb"></i> Gợi ý:
					<ul>
						<li>Chất liệu: 100% cotton, mềm mại và thoáng khí.</li>
						<li>Thiết kế: Cổ áo đính cúc, tay dài có thể gấp lên dễ dàng.</li>
						<li>Màu sắc: Trắng, xanh dương, xám.</li>
						<li>Kích thước: S, M, L, XL.</li>
						<li>Chất lượng: Dệt chắc chắn, không phai màu sau nhiều lần giặt.</li>
					</ul>
				</small>
			</div>
			<button class=" custom-btn" @onclick="GenerateDescriptionAsync" disabled="@IsLoading">
				@if (IsLoading)
				{
					<span class="spinner-border spinner-border-sm"></span>
				}
				else
				{
					<span>  <i class="fa fa-plus-circle"></i> Bắt đầu tạo mô tả với AI của chúng tôi</span>
				}
			</button>

			<div class="mt-4 custom-content mb-2">
				<button class="btn btn-secondary custom-btn" @onclick="CopyContent">
					<i class="fa fa-copy"></i> Sao chép
				</button>

				@if (FormattedResponse.Any())
				{
					<ul>
						@foreach (var item in FormattedResponse)
						{
							<li>@item</li>
						}
					</ul>
				}
				@if (!string.IsNullOrWhiteSpace(ErrorMessage))
				{
					<div class="alert alert-danger">@ErrorMessage</div>
				}
			</div>


		</div>
	</div>

	<div class="row">
		<div class="col-md-12 d-flex justify-content-end">
			<div class="text-right mb-3">
				<button @onclick="SaveProduct" class="btn btn-success"><i class="fas fa-check"></i> Đăng bán</button>
			</div>
		</div>
	</div>
</div>
<div class="modal fade show" style="@(!string.IsNullOrEmpty(ImageError) ? "display: block;" : "display: none;")" tabindex="-1" aria-labelledby="imageErrorModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="imageErrorModalLabel">Lỗi hình ảnh</h5>
				<button type="button" class="btn-close" @onclick="CloseImageErrorModal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<p class="text-danger">@ImageError</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" @onclick="CloseImageErrorModal">Đóng</button>
			</div>
		</div>
	</div>
</div>
<div class="modal" tabindex="-1" role="dialog" id="successModal" style="display:@(isModalVisible ? "block" : "none")">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Thông báo</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<p>@modalMessage</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" @onclick="CloseModal">Đóng</button>
			</div>
		</div>
	</div>
</div>
@* <script>
	const quill = new Quill('#editor', {
		theme: 'snow'
	});
</script> *@
@code {
	private async Task CopyContent()
	{
		var content = string.Join("\n", FormattedResponse);
		await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", content);
	}
	private string ProductName { get; set; }
	private decimal ProductPrice { get; set; }
	private int ProductQuantity { get; set; }
	private int ProductCategoryId { get; set; }
	private string Description { get; set; }
	private string ProrityLevel { get; set; }
	private List<Category> categories = new List<Category>();
	private FirebaseStorage _firebaseStorage;
	private string ImageError { get; set; }
	private string ProductNameError { get; set; }
	private string ProductCategoryError { get; set; }
	private string ProductPriceError { get; set; }
	private bool isLoading = false;

	private string ProductDescriptionError { get; set; }
	private string ProductQuantityError { get; set; }
	private string ProrityLevelError { get; set; }

	private bool isModalVisible = false;
	private string modalMessage = string.Empty;
	private void CloseModal()
	{
		isModalVisible = false;
	}
	private void SelectPriority(string selectedPriority)
	{
		if (ProrityLevel == selectedPriority)
		{
			ProrityLevel = null;
		}
		else
		{
			ProrityLevel = selectedPriority;
		}
	}
	private List<ImageFile> selectedFiles = new List<ImageFile>
	{
		null, null, null, null, null, null, null, null,null,null,null
	};
	private int selectedImageCount = 0;

	private class ImageFile
	{
		public string DataUrl { get; set; }
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			// Khởi tạo Quill editor trên div #editor
			await JSRuntime.InvokeVoidAsync("initializeQuillEditor");
		}
	}

	protected override async Task OnInitializedAsync()
	{
		_firebaseStorage = new FirebaseStorage("dbbrotherhood-ac2f1.appspot.com");
		await LoadUserData();
	}

	private async Task LoadUserData()
	{
		categories = await HttpClient.GetFromJsonAsync<List<Category>>("api/Category/GetCategories");
	}
	private void CloseImageErrorModal()
	{
		ImageError = string.Empty;
		NavigationManager.NavigateTo("/post", forceLoad: true);
	}

	private async Task HandleFileSelected(InputFileChangeEventArgs e)
	{
		try
		{
			var files = e.GetMultipleFiles();

			if (files.Count == 0 ||files.Count > 10)
			{
				ImageError = "Vui lòng chọn ít nhất 1 ảnh và không quá 10 ảnh";
				selectedFiles.Clear();
				return;
			}

			ImageError = string.Empty;

			foreach (var file in files)
			{
				for (int i = 0; i < selectedFiles.Count; i++)
				{
					if (selectedFiles[i] == null)
					{
						selectedFiles[i] = new ImageFile
							{
								DataUrl = await GetImageDataUrl(file)
							};
						selectedImageCount++;
						break;
					}
				}
			}
		}
		catch (Exception ex)
		{
			ImageError = "Bạn phải chọn ít nhất 1 ảnh và tối đa 3 ảnh.";
			selectedFiles.Clear();
			return;
		}
	}

	private async Task<string> GetImageDataUrl(IBrowserFile file)
	{
		using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 3);
		var buffer = new byte[file.Size];
		await stream.ReadAsync(buffer);
		return $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
	}
	private async Task SaveProduct()
	{
		// Bắt đầu loading
		isLoading = true;

		ProductNameError = string.Empty;
		ProductCategoryError = string.Empty;
		ProductPriceError = string.Empty;
		ProductQuantityError = string.Empty;
		ProrityLevelError = string.Empty;
		ProductDescriptionError = string.Empty;
		ImageError = string.Empty;

		// Kiểm tra lỗi đầu vào
		if (string.IsNullOrWhiteSpace(ProductName))
		{
			ProductNameError = "Vui lòng nhập tên sản phẩm.";
		}

		if (ProductCategoryId == 0)
		{
			ProductCategoryError = "Vui lòng chọn loại sản phẩm.";
		}

		if (ProductPrice <= 0)
		{
			ProductPriceError = "Giá sản phẩm phải lớn hơn 0.";
		}

		if (ProductQuantity <= 0)
		{
			ProductQuantityError = "Số lượng sản phẩm phải lớn hơn 0.";
		}

		if (string.IsNullOrWhiteSpace(ProrityLevel))
		{
			ProrityLevelError = "Vui lòng chọn mức độ ưu tiên.";
		}

		// Nếu có lỗi, dừng xử lý và tắt loading
		if (!string.IsNullOrWhiteSpace(ProductNameError) ||
			!string.IsNullOrWhiteSpace(ProductCategoryError) ||
			!string.IsNullOrWhiteSpace(ProductPriceError) ||
			!string.IsNullOrWhiteSpace(ProductQuantityError) ||
			!string.IsNullOrWhiteSpace(ProrityLevelError) ||
			!string.IsNullOrWhiteSpace(ProductDescriptionError) ||
			!string.IsNullOrWhiteSpace(ImageError))
		{
			isLoading = false;
			return;
		}

		// Kiểm tra tục tĩu trong tên sản phẩm
		var productNameCheckResult = await AnalyzeText(ProductName);
		if (!string.IsNullOrEmpty(productNameCheckResult))
		{
			ProductNameError = productNameCheckResult;
			isLoading = false;
			return;
		}

		// Kiểm tra tục tĩu trong mô tả sản phẩm
		var productDescriptionCheckResult = await AnalyzeText(Description);
		if (!string.IsNullOrEmpty(productDescriptionCheckResult))
		{
			ProductDescriptionError = productDescriptionCheckResult;
			isLoading = false;
			return;
		}

		try
		{
			var productDto = new ProductDto
				{
					Name = ProductName,
					Price = ProductPrice,
					Quantity = ProductQuantity,
					CategoryId = ProductCategoryId,
					Description = await JSRuntime.InvokeAsync<string>("getQuillContent"),
					ProrityLevel = ProrityLevel,
					PriceUp = (ProrityLevel == "Phổ thông") ? 25000 : 50000
				};

			var response = await HttpClient.PostAsJsonAsync("api/product/AddProduct", productDto);

			if (response.IsSuccessStatusCode)
			{
				var createdProduct = await response.Content.ReadFromJsonAsync<Product>();
				var productId = createdProduct?.IDProduct ?? 0;

				if (productId > 0)
				{
					await UploadImages(productId);
				}
				else
				{
					await JSRuntime.InvokeVoidAsync("alert", "Không thể lấy thông tin sản phẩm mới tạo.");
				}
			}
			else
			{
				var errorMessage = await response.Content.ReadAsStringAsync();
				await JSRuntime.InvokeVoidAsync("alert", $"Có lỗi xảy ra khi thêm sản phẩm: {errorMessage}");
			}
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("alert", $"Có lỗi xảy ra khi thêm sản phẩm: {ex.Message}");
		}
		finally
		{
			isLoading = false;
		}
	}

	private async Task<string> AnalyzeText(string inputText)
	{
		if (string.IsNullOrEmpty(inputText))
		{
			return string.Empty;
		}

		try
		{
			// Gọi hàm JavaScript để phân tích văn bản
			var result = await JSRuntime.InvokeAsync<Dictionary<string, string>>("analyzeText", inputText);

			// Kiểm tra nếu có lỗi trong kết quả trả về
			if (result.ContainsKey("error"))
			{
				return result["error"];
			}
			else if (result.ContainsKey("message"))
			{
				return result["message"];
			}
		}
		catch (Exception ex)
		{
			return $"Lỗi: {ex.Message}";
		}

		return string.Empty;
	}

	private async Task<string> CheckProfanity(string text)
	{
		if (string.IsNullOrWhiteSpace(text)) return null;

		try
		{
			var response = await HttpClient.PostAsJsonAsync("api/profanityfilter/check-profanity", text);
			if (response.IsSuccessStatusCode)
			{
				var result = await response.Content.ReadAsStringAsync();
				if (result.Contains("Văn bản có từ ngữ tục tiểu."))
				{
					return "Văn bản chứa từ ngữ tục tiểu.";
				}
				if (result.Contains("Văn bản có khả năng chứa từ ngữ tục tiểu."))
				{
					return "Văn bản có khả năng chứa từ ngữ không phù hợp.";
				}
			}
		}
		catch (Exception ex)
		{
			return $"Có lỗi xảy ra khi kiểm tra từ ngữ tục tiểu: {ex.Message}";
		}

		return null;
	}
	private async Task UploadImages(int productId)
	{
		try
		{
			var content = new MultipartFormDataContent();

			foreach (var file in selectedFiles)
			{
				if (file != null)
				{
					var byteArray = Convert.FromBase64String(file.DataUrl.Split(",")[1]);
					var fileContent = new ByteArrayContent(byteArray);
					fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("image/jpeg");

					content.Add(fileContent, "files", $"image_{Guid.NewGuid()}.jpg");
				}
			}

			var uploadResponse = await HttpClient.PostAsync($"api/ImageProduct/ImageProduct/{productId}/upload", content);

			if (uploadResponse.IsSuccessStatusCode)
			{
				modalMessage = "Sản phẩm đã được thêm thành công!";
				NavigationManager.NavigateTo("/");
			}
			else
			{
				var errorMessage = await uploadResponse.Content.ReadAsStringAsync();
				modalMessage = $"Có lỗi xảy ra khi tải ảnh: {errorMessage}";
				isModalVisible = true;
			}
		}
		catch (Exception ex)
		{
			modalMessage = $"Có lỗi xảy ra khi tải ảnh: {ex.Message}";
			isModalVisible = true;
		}
	}
	private string ResponseText { get; set; } = "";
	private string ErrorMessage { get; set; } = "";
	private bool IsLoading { get; set; } = false;
	private List<string> FormattedResponse { get; set; } = new();
	private async Task GenerateDescriptionAsync()
	{
		if (string.IsNullOrWhiteSpace(ProductName))
		{
			ErrorMessage = "Vui lòng nhập tên sản phẩm!";
			return;
		}

		IsLoading = true;
		ErrorMessage = "";
		FormattedResponse.Clear();

		try
		{
			// API Key cho Gemini
			var apiKey = "AIzaSyC2r1g4eY-rSrBTkqeAhwRltlZJFk8sVzk";
			var url = $"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={apiKey}";

			// Payload gửi lên API Gemini
			var requestBody = new
			{
				contents = new[]
				{
				new
				{
					parts = new[]
					{
						new { text = $"Tạo mô tả sản phẩm: {ProductName}" }
					}
				}
			}
			};

			using var httpClient = new HttpClient();
			var response = await httpClient.PostAsJsonAsync(url, requestBody);

			if (response.IsSuccessStatusCode)
			{
				var result = await response.Content.ReadFromJsonAsync<GeminiResponse>();
				var rawText = result?.candidates?.FirstOrDefault()?.content?.parts?.FirstOrDefault()?.text ?? "";
				FormattedResponse = rawText.Split(new[] { '\n', '*' }, StringSplitOptions.RemoveEmptyEntries)
													.Select(line => line.Trim())
													.Where(line => !string.IsNullOrWhiteSpace(line))
													.ToList();
			}
			else
			{
				ErrorMessage = $"Lỗi: {response.ReasonPhrase}";
			}
		}
		catch (Exception ex)
		{
			ErrorMessage = $"Đã xảy ra lỗi: {ex.Message}";
		}
		finally
		{
			IsLoading = false;
		}
	}

	public class GeminiResponse
	{
		public Candidate[] candidates { get; set; }

		public class Candidate
		{
			public Content content { get; set; }

			public class Content
			{
				public Part[] parts { get; set; }

				public class Part
				{
					public string text { get; set; }
				}
			}
		}
	}

	// Biến trạng thái modal
	private bool IsPolicyModalVisible { get; set; } = false;

	// Phương thức hiển thị modal
	private void OpenPolicyModal()
	{
		IsPolicyModalVisible = true;
	}

	// Phương thức ẩn modal
	private void ClosePolicyModal()
	{
		IsPolicyModalVisible = false;
	}
}
<script src="/js/Check.js"></script>