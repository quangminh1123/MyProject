@page "/XacThucCCCD"

@using Microsoft.AspNetCore.Components.Forms
@using Newtonsoft.Json
@using System.Text.Json
@using System.IO
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime jsruntime
<div class="container-fluid">
    <ul class="breadcrumb">
        <li class="breadcrumb-item"><a href="#"><i class="bi bi-house"></i> Trang chủ</a></li>
        <li class="breadcrumb-item"><a href="#">Xác thực thông tin</a></li>
    </ul>
</div>
<div class="container">
    <div class="row">
        <div class="col-md-4">
            <!-- Phần tải ảnh CCCD -->
            <div class="upload-section card p-4 shadow-sm">
                <h3 class="text-center mb-4">Chọn ảnh CCCD</h3>

                <!-- Input cho ảnh CCCD -->
                <div class="form-group">
                    <InputFile OnChange="HandleCccdFileSelected" accept="image/*" class="form-control-file" />
                </div>

                @if (UploadedFile != null)
                {
                    <!-- Hiển thị ảnh xem trước CCCD -->
                    <div class="mt-3 text-center">
                        <img src="@PreviewImage" alt="Ảnh CCCD đã chọn" class="img-fluid mb-3" style="max-height: 200px; object-fit: contain;" />
                    </div>
                }
            </div>

            <!-- Phần tải ảnh khuôn mặt -->
            <div class="upload-section card mt-4 p-4 shadow-sm">
                <h3 class="text-center mb-4">Chọn ảnh khuôn mặt</h3>

                <!-- Input cho ảnh khuôn mặt -->
                <div class="form-group">
                    <InputFile id="faceFile" OnChange="HandleFaceFileSelected" accept="image/*" class="form-control-file" />
                </div>

                @if (faceFile != null)
                {
                    <!-- Hiển thị ảnh xem trước khuôn mặt -->
                    <div class="mt-3 text-center">
                        <img src="@PreviewImageFace" alt="Ảnh khuôn mặt đã chọn" class="img-fluid mb-3" style="max-height: 200px; object-fit: contain;" />
                    </div>
                }
            </div>

            <!-- Nút xác thực -->
            @if (UploadedFile != null && faceFile != null)
            {
                <div class="text-center mt-4">
                    <button class="btn btn-success w-100" @onclick="VerifyFile">Xác Thực</button>
                </div>
            }
            @if (!string.IsNullOrEmpty(Error))
            {
                <div class="alert alert-danger mt-3 text-center">@Error</div>
            }
            @if (!string.IsNullOrEmpty(Result))
            {
                <div class="result-section card mt-4 p-4 shadow-sm">
                    <h4 class="text-center mb-3">Kết quả xác thực</h4>
                    <div class="alert alert-info text-center">
                        @Result
                    </div>
                </div>
            }
        </div>



        <div class="col-md-8">
            <EditForm Model="editContext" OnValidSubmit="SubmitForm">
                <div class="card">
                    <h3 class="text-center mb-4">Thông Tin CCCD</h3>
                    <div class="mb-3">
                        <label for="Id" class="form-label">Số CCCD:</label>
                        <InputText id="Id" class="form-control" @bind-Value="RecognitionData.Id" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="Name" class="form-label">Họ và Tên:</label>
                        <InputText id="Name" class="form-control" @bind-Value="RecognitionData.Name" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="Gender" class="form-label">Giới Tính:</label>
                        <InputText id="Gender" class="form-control" @bind-Value="RecognitionData.Sex" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="Dob" class="form-label">Ngày Sinh:</label>
                        <InputText id="Dob" class="form-control" @bind-Value="RecognitionData.Dob" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="Home" class="form-label">Địa Chỉ:</label>
                        <InputText id="Home" class="form-control" @bind-Value="RecognitionData.Home" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="Nationality" class="form-label">Quốc Tịch:</label>
                        <InputText id="Nationality" class="form-control" @bind-Value="RecognitionData.Nationality" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="Doe" class="form-label">Ngày Hết Hạn:</label>
                        <InputText id="Doe" class="form-control" @bind-Value="RecognitionData.Doe" readonly />
                    </div>
                    @if (RecognitionData.Id == null)
                    {

                    }
                    else
                    {
                        <button type="submit" class="btn btn-success w-100">Xác Nhận</button>
                    }

                </div>
            </EditForm>
        </div>

    </div>
</div>
@if (showModal)
{
    <div class="modal show" tabindex="-1" style="display: block;" aria-labelledby="modalLabel" aria-hidden="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalLabel">Thông Báo</h5>
                    <button type="button" class="btn-close" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <i class="fa fa-check-circle" style="color: #28a745; font-size: 50px;"></i>
                    <p class="mt-3">Thông tin đã được lưu thành công!</p>
                </div>
                <div class="modal-footer">
                    <a type="button" class="btn btn-success" href="/ThongTinNguoiDung/@accountInfo.UserName">Đóng</a>
                </div>
            </div>
        </div>
    </div>
}


<script>
    document.getElementById('testModalButton').addEventListener('click', function () {
        var myModal = new bootstrap.Modal(document.getElementById('successModal'));
        myModal.show();
    });

</script>
<style>

    .upload-section h3 {
        font-size: 1.5rem;
        color: #28a745;
        font-weight: bold;
        margin-bottom: 15px;
    }

    .upload-section input[type="file"] + label {
        display: inline-block;
        padding: 12px 24px;
        background-color: #28a745;
        color: #fff;
        font-size: 1rem;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-top: 10px;
        width: 100%;
        text-align: center;
    }

    .upload-section input[type="file"]:hover + label {
        background-color: #218838;
    }

    .upload-section button {
        width: 100%;
        padding: 12px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-top: 15px;
    }

        .upload-section button:hover {
            background-color: #218838;
        }

    .alert-danger {
        font-size: 0.875rem;
        padding: 10px;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        border-radius: 5px;
        margin-top: 15px;
    }

    .container {
        margin-top: 30px;
        font-family: Arial, sans-serif;
        color: #333;
    }

    .form-control[readonly], .form-control[disabled] {
        background-color: #f5f5f5;
        cursor: not-allowed;
    }

    h3 {
        font-size: 1.5rem;
        color: #28a745;
        margin-bottom: 20px;
    }

    .upload-section {
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f8f9fa;
    }

        .upload-section img {
            max-width: 100%;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-top: 10px;
        }

        .upload-section button {
            width: 100%;
            padding: 10px;
            background-color: #28a745;
            color: #fff;
            border: none;
            border-radius: 5px;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .upload-section button:hover {
                background-color: #218838;
            }

    .card {
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #ffffff;
        padding: 20px;
    }

        .card h3 {
            font-size: 1.25rem;
            color: #28a745;
            margin-bottom: 20px;
        }

    .form-control {
        border-radius: 5px;
        padding: 12px;
        margin-bottom: 10px;
        border: 1px solid #ddd;
    }

        .form-control:focus {
            border-color: #28a745;
            box-shadow: 0 0 5px rgba(40, 167, 69, 0.3);
        }

    button[type="submit"] {
        background-color: #28a745;
        color: #fff;
        border: none;
        width: 100%;
        padding: 12px;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        button[type="submit"]:hover {
            background-color: #218838;
        }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        padding: 10px;
        border-radius: 5px;
    }

    .mt-2 {
        margin-top: 20px;
    }

</style>
@code {

    private IBrowserFile? faceFile;
    private IBrowserFile? UploadedFile;
    public string? Result;
    private string? Error;
    private bool showModal = false;
    private RecognitionDto RecognitionData = new RecognitionDto();
    private EditContext editContext;
    private string PreviewImage { get; set; }
    private string PreviewImageFace { get; set; }

    protected override void OnInitialized()
    {
        RecognitionData = new RecognitionDto();
        editContext = new EditContext(RecognitionData);
    }


    private async Task HandleCccdFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && file.ContentType.StartsWith("image"))
        {
            try
            {
                UploadedFile = file;
                PreviewImage = await GetImagePreviewUrl(file);
            }
            catch (Exception ex)
            {
                Error = "Có lỗi xảy ra khi tải ảnh CCCD.";
            }
        }
        else
        {
            Error = "Vui lòng chọn một tệp ảnh hợp lệ cho CCCD.";
        }
    }

    private async Task HandleFaceFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && file.ContentType.StartsWith("image"))
        {
            try
            {
                faceFile = file;
                PreviewImageFace = await GetImagePreviewUrl(file);
            }
            catch (Exception ex)
            {
                Error = "Có lỗi xảy ra khi tải ảnh khuôn mặt.";
            }
        }
        else
        {
            Error = "Vui lòng chọn một tệp ảnh hợp lệ cho khuôn mặt.";
        }
    }

    private async Task<string> GetImagePreviewUrl(IBrowserFile file)
    {
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        return $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }


    private async Task VerifyFile()
    {
        if (UploadedFile == null)
        {
            Error = "Vui lòng chọn một file để xác thực.";
            return;
        }

        await UploadImageAsync();
    }

    private async Task UploadImageAsync()
    {

        try
        {
            bool isMatched = await VerifyFaceMatchAsync();
            if (!isMatched)
            {

                return;
            }
            using var content = new MultipartFormDataContent();
            var cccdStream = UploadedFile.OpenReadStream();
            var cccdContent = new StreamContent(cccdStream);
            cccdContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(UploadedFile.ContentType);
            content.Add(cccdContent, "image", UploadedFile.Name);
            using var client = new HttpClient();
            client.DefaultRequestHeaders.Add("api-key", "OEwn9iQDewvnjxeCbvPnNyyyzGVoLe4s");

            var response = await client.PostAsync("https://api.fpt.ai/vision/idr/vnm", content);

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                var recognitionData = ParseJsonResponse(jsonResponse);

                if (recognitionData != null)
                {
                    RecognitionData = recognitionData;

                }
                else
                {
                    Error = "Không tìm thấy dữ liệu trong ảnh CCCD.";
                }
            }
            else
            {
                Error = $"Lỗi từ API nhận diện ảnh CCCD: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            Error = "Lỗi trong quá trình xử lý ảnh CCCD: " + ex.Message;
        }
    }

    private RecognitionDto ParseJsonResponse(string jsonResponse)
    {
        try
        {
            using var jsonDocument = JsonDocument.Parse(jsonResponse);
            var root = jsonDocument.RootElement;

            if (root.TryGetProperty("data", out var dataElement) && dataElement.ValueKind == JsonValueKind.Array && dataElement.GetArrayLength() > 0)
            {
                var firstData = dataElement[0];
                var id = firstData.GetProperty("id").GetString();
                var name = firstData.GetProperty("name").GetString();
                var dob = firstData.GetProperty("dob").GetString();
                var gender = firstData.GetProperty("sex").GetString();
                var nationality = firstData.GetProperty("nationality").GetString();
                var home = firstData.GetProperty("home").GetString();
                var doe = firstData.GetProperty("doe").GetString();
                return new RecognitionDto
                    {
                        UserName = accountInfo.UserName,
                        Id = id,
                        Name = name,
                        Sex = gender,
                        Dob = dob.ToString(),
                        Nationality = nationality,
                        Home = home,
                        Doe = doe.ToString()
                    };

            }

            throw new Exception("Không tìm thấy dữ liệu trong JSON.");
        }
        catch (Exception ex)
        {
            Error = "Lỗi khi phân tích JSON: " + ex.Message;
            return null;
        }
    }
    private async Task<bool> VerifyFaceMatchAsync()
    {
        try
        {
            using var content = new MultipartFormDataContent();

            var cccdStream = UploadedFile.OpenReadStream();
            var cccdContent = new StreamContent(cccdStream);
            cccdContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(UploadedFile.ContentType);
            content.Add(cccdContent, "file[]", UploadedFile.Name);

            var faceStream = faceFile.OpenReadStream();
            var faceContent = new StreamContent(faceStream);
            faceContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(faceFile.ContentType);
            content.Add(faceContent, "file[]", faceFile.Name);

            using var client = new HttpClient();
            client.DefaultRequestHeaders.Add("api-key", "OEwn9iQDewvnjxeCbvPnNyyyzGVoLe4s");

            var response = await client.PostAsync("https://api.fpt.ai/dmp/checkface/v1", content);

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                var jsonDoc = JsonDocument.Parse(jsonResponse);

                if (jsonDoc.RootElement.TryGetProperty("code", out var codeProperty) && codeProperty.GetString() == "200")
                {
                    var data = jsonDoc.RootElement.GetProperty("data");
                    bool isMatch = data.GetProperty("isMatch").GetBoolean();
                    double similarity = data.GetProperty("similarity").GetDouble();
                    bool isBothImgIDCard = data.GetProperty("isBothImgIDCard").GetBoolean();

                    // Trường hợp cả hai ảnh đều là ảnh căn cước
                    if (isBothImgIDCard)
                    {
                        Result = $"Cả hai ảnh đều là ảnh căn cước. Không thể xác thực.";
                        return false;
                    }

                    if (isMatch)
                    {
                        Result = $"Ảnh khuôn mặt và ảnh căn cước KHỚP. Độ tương đồng: {similarity}%";
                    }
                    else
                    {
                        Result = $"Ảnh khuôn mặt và ảnh căn cước KHÔNG KHỚP. Độ tương đồng: {similarity}%";
                    }

                    return isMatch; // Trả về true nếu khớp
                }
                else
                {
                    Error = "Lỗi từ API xác thực ảnh khuôn mặt.";
                }
            }
            else
            {
                Error = "Lỗi kết nối với API xác thực ảnh khuôn mặt.";
            }
        }
        catch (Exception ex)
        {
            Error = "Lỗi trong quá trình xử lý xác thực ảnh khuôn mặt: " + ex.Message;
        }

        return false; // Trả về false nếu có lỗi
    }


    private async Task SubmitForm()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/User/AcceptIDCard", RecognitionData);
            if (response.IsSuccessStatusCode)
            {
                showModal = true;
            }
            else
            {
                Error = "Lưu thông tin thất bại!";
            }
        }
        catch (Exception ex)
        {
            Error = "Lỗi khi lưu thông tin: " + ex.Message;
        }
    }

    public class FptApiResponse
    {
        public int ErrorCode { get; set; }
        public string ErrorMessage { get; set; }
        public List<RecognitionDto> Data { get; set; }
    }

    public class RecognitionDto
    {
        public string UserName { get; set; }
        public string? Id { get; set; }
        public string? Name { get; set; }
        public string? Sex { get; set; }
        public string? Dob { get; set; }
        public string? Home { get; set; }
        public string? Nationality { get; set; }
        public string? Doe { get; set; }
    }

    public class AddressEntities
    {
        public string Province { get; set; }
        public string District { get; set; }
        public string Ward { get; set; }
        public string Street { get; set; }
    }
    private bool isLoading = true;
    private string errorMessage;
    AccountInfoDto accountInfo;
    private bool IsLoggedIn { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        await CheckTokenAndLoadAccountInfo();
    }

    private async Task CheckTokenAndLoadAccountInfo()
    {
        var token = await jsruntime.InvokeAsync<string>("localStorage.getItem", "token");

        if (!string.IsNullOrEmpty(token))
        {

            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            await LoadAccountInfo();
        }
        else
        {
            isLoading = false;
            IsLoggedIn = false;
        }
    }

    private async Task LoadAccountInfo()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await HttpClient.GetAsync("api/User/GetMyInfo");

            if (response.IsSuccessStatusCode)
            {

                accountInfo = await response.Content.ReadFromJsonAsync<AccountInfoDto>();
                IsLoggedIn = true;
            }
            else
            {

                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Lỗi: {response.StatusCode} - {errorContent}";
                IsLoggedIn = false;
                await Logout();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Có lỗi xảy ra khi lấy thông tin tài khoản: " + ex.Message;
            IsLoggedIn = false;
        }
        finally
        {
            isLoading = false;
        }
    }

    private class AccountInfoDto
    {
        public string UserName { get; set; }
        public decimal PreSystem { get; set; }
        public string FullName { get; set; }
        public string PhoneNumber { get; set; }
        public string Gender { get; set; }
        public DateTime? Birthday { get; set; }
        public string ImageAccount { get; set; }
    }


    private async Task Logout()
    {
        await jsruntime.InvokeVoidAsync("localStorage.removeItem", "token");
        IsLoggedIn = false;
        accountInfo = null;
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
}

