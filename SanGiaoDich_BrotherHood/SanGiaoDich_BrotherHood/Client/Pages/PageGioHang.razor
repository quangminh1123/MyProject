@page "/PageGioHang"
@using SanGiaoDich_BrotherHood.Shared.Models
@using System.Text.Json
@inject HttpClient http
@inject NavigationManager navigation
@inject IJSRuntime jsruntime
<style>
    .product-info {
        font-size: 14px;
        color: #555;
        margin-top: 20px;
        text-align: center;
    }

    .product-link {
        color: #28a745;
        text-decoration: none;
        font-weight: bold;
    }

        .product-link:hover {
            color: #218838;
            text-decoration: underline;
        }

</style>
@code {
    private bool isLoading = true;
    private string errorMessage;
    private string userName;
    private int idCart;
    private bool IsLoggedIn { get; set; } = false;
    private decimal selectedTotal;

    public class CartUser
    {
        public int IdCart { get; set; }
        public string UserName { get; set; }
    }

    public class CartItemUser
    {
        public int CartItemID { get; set; }
        public int IdCart { get; set; }
        public int IdProduct { get; set; }
        public string ProductName { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
        public string CategoryName { get; set; }
        public string ImageUrl { get; set; }
        public bool IsSelected { get; set; }
        public string UserName { get; set; }
        public string FullName { get; set; }
    }


    private CartUser cart;
    private IEnumerable<CartItemUser> itemUsers;

    protected override async Task OnInitializedAsync()
    {
        await CheckTokenAndLoadAccountInfo();
    }

    private async Task LoadCart()
    {
        try
        {
            isLoading = true;
            var response = await http.GetAsync($"api/Cart/GetCartsByUserName/{userName}");

            if (response.IsSuccessStatusCode)
            {
                cart = await response.Content.ReadFromJsonAsync<CartUser>();
                if (cart != null)
                {
                    idCart = cart.IdCart;
                    await LoadCartItems(idCart);
                }
                else
                {
                    errorMessage = "Giỏ hàng không tồn tại.";
                }
            }
            else
            {
                errorMessage = "Không thể tải giỏ hàng.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Có lỗi xảy ra khi tải giỏ hàng: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCartItems(int cartId)
    {
        try
        {
            var cartItemsResponse = await http.GetAsync($"api/CartItem/GetAllCartItems/{cartId}");
            if (cartItemsResponse.IsSuccessStatusCode)
            {
                itemUsers = await cartItemsResponse.Content.ReadFromJsonAsync<List<CartItemUser>>();

                foreach (var item in itemUsers)
                {
                    // Lấy thông tin sản phẩm
                    var product = await GetProductById(item.IdProduct);
                    if (product != null)
                    {
                        item.Quantity = product.Quantity;
                        item.ProductName = product.Name;
                        item.Price = product.Price;
                        item.CategoryName = await GetCategoryNameById(product.IDCategory);
                        var images = await GetImagesByProductId(item.IdProduct);
                        item.ImageUrl = images.FirstOrDefault()?.Image;
                        item.UserName = product.UserName;
                    }

                    // Gọi API để lấy FullName thông qua UserName
                    var accountResponse = await http.GetAsync($"api/User/GetAccountInfoByName/{item.UserName}");
                    if (accountResponse.IsSuccessStatusCode)
                    {
                        var account = await accountResponse.Content.ReadFromJsonAsync<AccountInfoDto>();
                        if (account != null)
                        {
                            item.FullName = account.FullName; // Gắn FullName vào item
                        }
                    }
                    else
                    {
                        errorMessage = "Không thể lấy thông tin người dùng.";
                    }
                }

                foreach (var shopKey in itemUsers.Select(i => i.UserName).Distinct())
                {
                    shopLockStates[shopKey] = false;
                }

                UpdateSelectedTotal();
            }
            else
            {
                errorMessage = "Không thể tải các sản phẩm trong giỏ hàng.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Có lỗi xảy ra khi tải sản phẩm giỏ hàng: {ex.Message}";
        }
    }


    private async Task CheckTokenAndLoadAccountInfo()
    {
        var token = await jsruntime.InvokeAsync<string>("localStorage.getItem", "token");

        if (!string.IsNullOrEmpty(token))
        {
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            await LoadAccountInfo();
        }
        else
        {
            navigation.NavigateTo("/login");
        }
    }

    private class AccountInfoDto
    {
        public string UserName { get; set; }
        public string FullName { get; set; }
        public string PhoneNumber { get; set; }
        public string Gender { get; set; }
        public DateTime? Birthday { get; set; }
        public string ImageAccount { get; set; }
    }

    private async Task LoadAccountInfo()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await http.GetAsync("api/User/GetMyInfo");

            if (response.IsSuccessStatusCode)
            {
                var accountInfo = await response.Content.ReadFromJsonAsync<AccountInfoDto>();
                IsLoggedIn = true;
                userName = accountInfo.UserName;
                await LoadCart();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                IsLoggedIn = false;
                navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Có lỗi xảy ra: {ex.Message}";
            IsLoggedIn = false;
        }
        finally
        {
            isLoading = false;
        }
    }

    private Product product;
    private string categoryName;
    private List<ImageProduct> images;

    private async Task<Product> GetProductById(int id)
    {
        var response = await http.GetAsync($"api/product/GetProductById/{id}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<Product>();
        }
        throw new Exception("Cannot fetch product data");
    }

    public async Task<string> GetCategoryNameById(int idCategory)
    {
        var response = await http.GetAsync($"api/category/GetCategoryByID/{idCategory}");
        if (response.IsSuccessStatusCode)
        {
            var category = await response.Content.ReadFromJsonAsync<Category>();
            return category?.NameCate;
        }
        return null;
    }

    private async Task<List<ImageProduct>> GetImagesByProductId(int id)
    {
        var response = await http.GetAsync($"api/ImageProduct/GetImageProduct/{id}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<List<ImageProduct>>() ?? new List<ImageProduct>();
        }
        else
        {
            errorMessage = "Không thể tải ảnh từ API: " + response.ReasonPhrase;
            return new List<ImageProduct>(); // Trả về danh sách rỗng nếu có lỗi
        }
    }

    private void UpdateSelectedTotal()
    {
        selectedTotal = itemUsers
            ?.Where(item => item.IsSelected)
            .Sum(item => item.Price) ?? 0;
    }

    private string selectedShop; // Lưu shop đang được chọn
    private Dictionary<string, bool> shopLockStates = new Dictionary<string, bool>();

    private async void OnItemSelectionChanged(bool isSelected, CartItemUser cartItem)
    {
        if (isSelected)
        {
            // Nếu chưa chọn shop nào, chọn shop của sản phẩm này
            if (string.IsNullOrEmpty(selectedShop))
            {
                selectedShop = cartItem.UserName;

                // Khóa các shop khác
                foreach (var shopKey in itemUsers.Select(i => i.UserName).Distinct())
                {
                    shopLockStates[shopKey] = shopKey != selectedShop;
                }
            }
            // Nếu shop của sản phẩm này khác shop đã chọn, bỏ chọn sản phẩm này
            else if (cartItem.UserName != selectedShop)
            {
                cartItem.IsSelected = false;
                return; // Dừng lại nếu chọn sản phẩm của shop khác khi đã có shop được chọn
            }
        }
        else
        {
            // Khi bỏ chọn một sản phẩm, kiểm tra xem còn sản phẩm nào khác của shop này được chọn không
            var remainingSelected = itemUsers.Where(item => item.IsSelected && item.UserName == cartItem.UserName).ToList();

            // Nếu không còn sản phẩm nào được chọn trong shop này, bỏ khóa các shop khác
            if (!remainingSelected.Any())
            {
                selectedShop = null;

                // Mở khóa tất cả các shop
                foreach (var shopKey in itemUsers.Select(i => i.UserName).Distinct())
                {
                    shopLockStates[shopKey] = false;
                }
            }
        }

        // Cập nhật trạng thái chọn cho sản phẩm
        cartItem.IsSelected = isSelected;

        // Cập nhật tổng tiền đã chọn
        UpdateSelectedTotal();
        StateHasChanged();  // Cập nhật lại giao diện
    }

    private void ToggleSelectAll(bool isSelected, string shopKey)
    {
        if (isSelected)
        {
            selectedShop = shopKey;

            // Chọn tất cả sản phẩm của shop này
            foreach (var item in itemUsers.Where(i => i.UserName == shopKey))
            {
                item.IsSelected = true;
            }

            // Khóa tất cả các shop khác
            foreach (var shop in itemUsers.Select(i => i.UserName).Distinct())
            {
                shopLockStates[shop] = shop != selectedShop;
            }
        }
        else
        {
            // Bỏ chọn tất cả sản phẩm
            foreach (var item in itemUsers)
            {
                item.IsSelected = false;
            }
            selectedShop = null;

            // Mở khóa tất cả các shop
            foreach (var shopKey1 in itemUsers.Select(i => i.UserName).Distinct())
            {
                shopLockStates[shopKey1] = false;
            }
        }

        // Cập nhật tổng tiền sau khi thay đổi
        UpdateSelectedTotal();
    }


    private async Task ProcessPayment()
    {
        // Lọc chỉ các sản phẩm đã chọn
        var selectedItems = itemUsers.Where(item => item.IsSelected).ToList();

        if (selectedItems.Any())
        {
            // Xóa thông báo lỗi nếu có sản phẩm được chọn
            errorMessage = string.Empty;

            // Lưu các sản phẩm đã chọn vào local storage
            await jsruntime.InvokeVoidAsync("localStorage.setItem", "selectedCartItems", JsonSerializer.Serialize(selectedItems));

            // Điều hướng đến trang thanh toán
            navigation.NavigateTo("/PageThanhToan");
        }
        else
        {
            errorMessage = "Vui lòng chọn ít nhất một sản phẩm để thanh toán.";
        }
    }

    private async Task RemoveItem(CartItemUser item)
    {
        Console.WriteLine($"Đang xóa sản phẩm: {item.CartItemID}");
        try
        {
            var response = await http.DeleteAsync($"api/CartItem/delete/{item.CartItemID}");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("API trả về thành công.");
                itemUsers = itemUsers.Where(i => i.CartItemID != item.CartItemID).ToList();
                UpdateSelectedTotal();
                StateHasChanged();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API trả về lỗi: {error}");
                errorMessage = "Không thể xóa sản phẩm: " + error;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi gọi API: {ex.Message}");
            errorMessage = "Lỗi khi xóa sản phẩm: " + ex.Message;
        }
    }

    private async Task ShowErrorMessage(string message, int durationMs = 3000)
    {
        errorMessage = message;
        StateHasChanged(); // Cập nhật giao diện ngay sau khi hiển thị thông báo
        await Task.Delay(durationMs); // Chờ trong khoảng thời gian chỉ định
        errorMessage = null; // Xóa thông báo sau khi hết thời gian
        StateHasChanged(); // Cập nhật lại giao diện
    }
}

<style>
   
</style>

<div class="container-fluid">
    <ul class="breadcrumb">
        <li class="breadcrumb-item"><a href="#"><i class="bi bi-house"></i> Trang chủ</a></li>
        <li class="breadcrumb-item"><a href="#">Giỏ hàng của bạn</a></li>
    </ul>
</div>

<div class="row mt-2">
    <div class="col-1 col-md-1"></div>
    <div class="col-10 col-md-10">
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th class="text-center align-middle" style="width:50px">
                            <div class="checkbox-wrapper-30 text-center">
                                <span class="checkbox">
                                  
                                    <svg>
                                        <use xlink:href="#checkbox-30" class="checkbox"></use>
                                    </svg>
                                </span>
                                <svg xmlns="http://www.w3.org/2000/svg" style="display:none">
                                    <symbol id="checkbox-30" viewBox="0 0 22 22">
                                        <path fill="none" stroke="currentColor" d="M5.5,11.3L9,14.8L20.2,3.3l0,0c-0.5-1-1.5-1.8-2.7-1.8h-13c-1.7,0-3,1.3-3,3v13c0,1.7,1.3,3,3,3h13c1.7,0,3-1.3,3-3v-13c0-0.4-0.1-0.8-0.3-1.2" />
                                    </symbol>
                                </svg>
                            </div>
                        </th>
                        <th scope="col" class="text-center">Hình ảnh</th>
                        <th scope="col" class="text-center">Tên sản phẩm</th>
                        <th scope="col" class="text-center">Loại sản phẩm</th>
                        <th scope="col" class="text-center">Giá</th>
                        <th scope="col" class="text-center"></th>
                    </tr>
                </thead>
                <tbody>
                    @if (itemUsers != null && itemUsers.Any())
                    {
                        // Nhóm sản phẩm theo shop (UserName)
                        var groupedItems = itemUsers.GroupBy(item => item.UserName);

                        foreach (var shop in groupedItems)
                        {
                            <!-- Tên shop -->
                            <tr>
                                <td colspan="6" class="text-left font-weight-bold bg-light">
                                    <div class="d-flex align-items-center">
                                        <!-- Checkbox của shop -->
                                        <input type="checkbox" @onchange="(e) => ToggleSelectAll((bool)e.Value, shop.Key)"
                                               disabled="@shopLockStates.GetValueOrDefault(shop.Key, false)">
                                        <i class="bi bi-shop ms-2 me-2"></i> Shop: @shop.FirstOrDefault()?.FullName

                                    </div>
                                </td>
                            </tr>

                            <!-- Danh sách sản phẩm của shop -->
                            @foreach (var item in shop)
                            {
                                <tr class="mb-2">
                                    <!-- Cột checkbox -->
                                    <!-- Cột checkbox cho từng sản phẩm -->
                                    <td class="text-center align-middle">
                                        <div class="checkbox-wrapper-30">
                                            <span class="checkbox">
                                                <input type="checkbox" checked="@item.IsSelected"
                                                       @onchange="(e) => OnItemSelectionChanged((bool)e.Value, item)"
                                                       disabled="@shopLockStates.GetValueOrDefault(item.UserName, false)">
                                                <svg>
                                                    <use xlink:href="#checkbox-30" class="checkbox"></use>
                                                </svg>
                                            </span>
                                        </div>
                                    </td>

                                    <!-- Cột hình ảnh -->
                                    <td class="text-center align-middle">
                                        <img src="@item.ImageUrl" alt="Product Image" style="width:100px;" />
                                    </td>

                                    <!-- Cột tên sản phẩm -->
                                    <td class="text-center align-middle">
                                        <h5 class="m-0" style="font-weight:bolder">@item.ProductName</h5>
                                    </td>

                                    <!-- Cột loại sản phẩm -->
                                    <td class="text-center align-middle">
                                        <h5 class="m-0" style="font-weight:bolder">@item.CategoryName</h5>
                                    </td>

                                    <!-- Cột giá sản phẩm -->
                                    <td class="text-center align-middle">
                                        <div style="color:green; font-weight:bolder">@($"{item.Price:N0} VNĐ")</div>
                                    </td>

                                    <!-- Cột tùy chọn (nút xóa) -->
                                    <td class="text-center align-middle">
                                        <i class="bi bi-trash3-fill text-danger" style="cursor:pointer;" @onclick="async () => await RemoveItem(item)"></i>
                                    </td>
                                </tr>
                            }
                        }
                    }
                    else
                    {
                        <tr><td colspan="6" class="text-center">Không có sản phẩm trong giỏ hàng.</td></tr>
                    }
                </tbody>

                <tfoot>
                    <tr>
                        <td colspan="4" class="text-right font-weight-bold">Tổng tiền cửa hàng:</td>
                        <td class="text-center font-weight-bold">@($"{selectedTotal:N0} VNĐ")</td>
                        <td colspan="2"></td>
                    </tr>
                </tfoot>
            </table>
            <div class="product-info">
                Nếu bạn chưa biết mua sản phẩm, hãy tham khảo <a href="/chitietgiaodich" class="product-link">trang này</a>.
            </div>
            <!-- Nút thanh toán -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
            }
            <div class="text-end mt-3">
                <button class="btn btn-success" @onclick="ProcessPayment">
                    <i class="bi bi-check-circle-fill"></i> Thanh toán
                </button>
            </div>
        </div>
    </div>
    <div class="col-1 col-md-1"></div>
</div>
