@page "/admin/dashboard"
@using SanGiaoDich_BrotherHood.Shared.Models
@layout AdminLayout
@inject HttpClient Http

@* @if (isLoading)
{
    <p>Đang tải dữ liệu...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}
else
{
    <div>
        <!-- Tìm kiếm -->
        <div class="mb-3">
            <input type="text" class="form-control" placeholder="Tìm kiếm theo Mã Giao Dịch, Người Dùng, Mô Tả..."
                   @bind="searchQuery" @oninput="SearchPayments" />
        </div>

        <!-- Hiển thị tổng doanh thu -->
        <div class="mb-3">
            <h4>Tổng Doanh Thu: @totalAmount.ToString("N0") đồng</h4>
        </div>

        <table class="payment-requests-table">
            <thead>
                <tr>
                    <th class="text-center">Mã Giao Dịch</th>
                    <th class="text-center">Người Dùng</th>
                    <th class="text-center">Số Tiền</th>
                    <th class="text-center">Mô Tả</th>
                    <th class="text-center">Thời Gian</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var req in paginatedRequests)
                {
                    <tr>
                        <td>@req.TxnRef</td>
                        <td class="text-center">@req.UserName</td>
                        <td class="text-center">@req.Amount.ToString("N0") đồng </td>
                        <td>@req.OrderDescription</td>
                        <td class="text-center">@req.CreatedDate</td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Pagination controls -->
        <div class="pagination mt-4">
            <button @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Trước</button>
            <span>Trang @currentPage / @totalPages</span>
            <button @onclick="NextPage" disabled="@(!CanGoToNextPage)">Sau</button>
        </div>
    </div>
}

<style>
    .payment-requests-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        font-family: Arial, sans-serif;
    }

        .payment-requests-table thead {
            background-color: #f1f1f1;
            color: #333;
            text-align: left;
            font-weight: bold;
        }

        .payment-requests-table th, .payment-requests-table td {
            padding: 12px;
            border: 1px solid #ddd;
            text-align: left;
            vertical-align: middle;
        }

            .payment-requests-table td:nth-child(3) {
                text-align: right;
            }

            .payment-requests-table td:nth-child(5) {
                text-align: center;
            }

        .payment-requests-table tr:hover {
            background-color: #f9f9f9;
        }

        .payment-requests-table td, .payment-requests-table th {
            font-size: 14px;
            color: #555;
        }

        .payment-requests-table th, .payment-requests-table td {
            min-width: 120px;
        }

        .payment-requests-table td {
            word-wrap: break-word;
        }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
    }

        .pagination button {
            padding: 5px 10px;
            cursor: pointer;
            border: 1px solid #ccc;
            background-color: #f1f1f1;
            border-radius: 5px;
        }

            .pagination button:disabled {
                cursor: not-allowed;
                background-color: #e0e0e0;
            }
</style>

@code {
    private bool isLoading = true;
    private string errorMessage;
    private List<PaymentRequestModel> paymentRequests = new();
    private List<PaymentRequestModel> filteredRequests = new();
    private List<PaymentRequestModel> paginatedRequests = new();
    private decimal totalAmount = 0;
    private int currentPage = 1;
    private int itemsPerPage = 5;
    private int totalPages = 1;
    private string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            paymentRequests = await Http.GetFromJsonAsync<List<PaymentRequestModel>>("api/payment/requests");
            totalAmount = paymentRequests.Sum(p => (decimal)p.Amount);
            totalPages = (int)Math.Ceiling(paymentRequests.Count / (double)itemsPerPage);
            UpdatePaginatedRequests();
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải dữ liệu: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void UpdatePaginatedRequests()
    {
        filteredRequests = string.IsNullOrWhiteSpace(searchQuery)
            ? paymentRequests
            : paymentRequests.Where(p => p.TxnRef.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                                          p.UserName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                                          p.OrderDescription.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

        totalPages = (int)Math.Ceiling(filteredRequests.Count / (double)itemsPerPage);
        paginatedRequests = filteredRequests.Skip((currentPage - 1) * itemsPerPage)
                                            .Take(itemsPerPage)
                                            .ToList();
    }

    private void SearchPayments()
    {
        currentPage = 1; // Reset to page 1 after search
        UpdatePaginatedRequests();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePaginatedRequests();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdatePaginatedRequests();
        }
    }

    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage < totalPages;
}
 *@