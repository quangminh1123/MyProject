@page "/Address"
@using System.Text.Json
@using SanGiaoDich_BrotherHood.Shared.Dto
@using SanGiaoDich_BrotherHood.Shared.Models
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigation

<div class="container">
    <div class="row d-flex justify-content-center">
        <div class="col-md-6">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger fs-5 text-center">@errorMessage</div>
            }
        </div>
    </div>
    <div class="row col-md-2 mb-3 mt-3">
        <a href="/addaddress" class="btn btn-success">Thêm địa chỉ</a>
    </div>

    <div class="row d-flex justify-content-center">
       <div class=" col-md-9">
            <table class="table table-striped table-bordered">
                <tbody>
                    @if (addresses != null)
                    {
                        foreach (var x in addresses)
                        {
                            <tr>
                                <td>@x.AdditionalDetail, @x.Wardcommune, @x.District, @x.ProvinceCity</td>
                                <td>
                                    <a href="/updateaddress/@x.IDAddress" class="btn btn-warning">Cập nhật</a>
                                    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal-@x.IDAddress">
                                        Xóa
                                    </button>
                                    <div class="modal fade" id="deleteModal-@x.IDAddress" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-body">
                                                    Bạn có chắc chắn xóa không?
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                                                    <button type="button" class="btn btn-danger" @onclick="() => Delete(x.IDAddress)">Xóa</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
       </div>
    </div>
</div>

@code {
    private List<AddressDetail> addresses;
    private InfoAccountDto account;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CheckLogined();
            addresses = await http.GetFromJsonAsync<List<AddressDetail>>($"api/AddressDetail/{account.UserName}");
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Lỗi: {ex}");
        }
    }

    private async Task CheckLogined()
    {
        var token = await js.InvokeAsync<string>("localStorage.getItem", "token");

        if (!string.IsNullOrEmpty(token))
        {
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            await LoadAccount();
        }
        else
        {
            errorMessage = "Vui lòng đăng nhập";
            StateHasChanged();
            await Task.Delay(2000);
            navigation.NavigateTo("/login");
        }
    }

    private async Task LoadAccount()
    {
        try
        {
            var response = await http.GetAsync("api/User/GetMyInfo");

            if (response.IsSuccessStatusCode)
            {
                account = await response.Content.ReadFromJsonAsync<InfoAccountDto>();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Có lỗi xảy ra: " + ex.Message;
        }
    }

    private async Task Delete(int id)
    {
        try
        {
            var response = await http.DeleteAsync($"api/AddressDetail/{id}");
            if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
            {
                navigation.NavigateTo("/address", forceLoad:true);
            }
            else
            {
                errorMessage = "Xóa không thành công";
                StateHasChanged();
                await Task.Delay(2000);
            }
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Lỗi: {ex}");
        }
    }
}
<script>
    export function hideModal(modalId) {
        const modal = bootstrap.Modal.getInstance(document.getElementById(modalId));
        if (modal) {
            modal.hide();
        }
    }
</script>
