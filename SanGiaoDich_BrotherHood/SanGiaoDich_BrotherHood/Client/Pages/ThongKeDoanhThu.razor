@page "/Admin/ThongKeDoanhThu"
@layout AdminLayout
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h3 class="text-center my-4 text-primary">Thống Kê Doanh Thu</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p class="mt-3">Đang xử lý...</p>
    </div>
}
else if (totalRevenue == null)
{
    <div class="text-center">
        <p class="mt-3">Không có dữ liệu doanh thu.</p>
    </div>
}
else
{
    <div class="container">
        <!-- Doanh thu tổng -->
        <div class="row my-4">
            <div class="col-md-4 mb-4">
                <div class="card text-white bg-success shadow-lg">
                    <div class="card-body text-center">
                        <h5 class="card-title">Tổng Doanh Thu</h5>
                        <p class="card-text fs-4 fw-bold">@totalRevenue.Value.ToString("C")</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Chọn khoảng thời gian -->
        <div class="row my-4">
            <div class="col-md-12">
                <h4 class="text-secondary">Chọn Thống Kê</h4>

                <div class="form-group">
                    <label for="datePicker">Ngày</label>
                    <input type="date" class="form-control" id="datePicker" @bind="selectedDate" />
                    <button class="btn btn-primary mt-2" @onclick="GetRevenueByDate">Xem Doanh Thu Theo Ngày</button>
                </div>

                <div class="form-group mt-4">
                    <label for="weekPicker">Tuần</label>
                    <input type="week" class="form-control" id="weekPicker" @bind="selectedWeek" />
                    <button class="btn btn-primary mt-2" @onclick="GetRevenueByWeek">Xem Doanh Thu Theo Tuần</button>
                </div>

                <div class="form-group mt-4">
                    <label for="monthPicker">Tháng</label>
                    <input type="month" class="form-control" id="monthPicker" @bind="selectedMonth" />
                    <button class="btn btn-primary mt-2" @onclick="GetRevenueByMonth">Xem Doanh Thu Theo Tháng</button>
                </div>
            </div>
        </div>

        <!-- Nút Xuất Excel -->
        <button class="btn btn-success rounded-pill py-2 px-3" @onclick="ExportToExcel">
            <i class="fas fa-file-excel"></i> Xuất Excel
        </button>

        <!-- Danh sách sản phẩm -->
        <div class="row my-4">
            <div class="col-md-12">
                <h4 class="text-secondary">Danh Sách Sản Phẩm</h4>
                @if (products == null)
                {
                    <p class="text-center">Đang tải dữ liệu sản phẩm...</p>
                }
                else if (!products.Any())
                {
                    <p class="text-center">Không có sản phẩm nào.</p>
                }
                else
                {
                    <table class="table table-striped table-bordered">
                        <thead class="table-light">
                            <tr class="text-center">
                                <th>ID</th>
                                <th>Tên Sản Phẩm</th>
                                <th>Số Lượng</th>
                                <th>Giá</th>
                                <th>Trạng Thái</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in products.Where(x => x.Status == "Đã duyệt"))
                            {
                                <tr>
                                    <td class="text-center">@product.IDProduct</td>
                                    <td>@product.Name</td>
                                    <td class="text-center">@product.Quantity</td>
                                    <td class="text-end">@product.Price.ToString("C")</td>
                                    <td class="text-center">@product.Status</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
}

<script>
    function downloadFile(fileName, contentType, content) {
        const blob = new Blob([content], { type: contentType });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>

@code {
    private decimal? totalRevenue;
    private List<Product> products;
    private DateTime selectedDate;
    private string selectedWeek;
    private DateTime selectedMonth;
    private bool isLoading = false;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            totalRevenue = await Http.GetFromJsonAsync<decimal?>("api/product/GetTotalRevenue");
            products = await Http.GetFromJsonAsync<List<Product>>("api/product/GetAllProduct");
        }
        catch (Exception ex)
        {
            errorMessage = "Không thể tải dữ liệu. Vui lòng thử lại sau.";
            Console.WriteLine($"Lỗi khi gọi API: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task GetRevenueByDate()
    {
        if (selectedDate != default(DateTime))
        {
            await GetRevenueByPeriod("Date", selectedDate.ToString("yyyy-MM-dd"));
        }
    }

    private async Task GetRevenueByWeek()
    {
        if (!string.IsNullOrEmpty(selectedWeek))
        {
            var weekParts = selectedWeek.Split('-');
            var year = int.Parse(weekParts[0]);
            var weekNumber = int.Parse(weekParts[1]);

            var startOfWeek = FirstDateOfWeekISO8601(year, weekNumber);
            await GetRevenueByPeriod("Week", startOfWeek.ToString("yyyy-MM-dd"));
        }
    }

    private async Task GetRevenueByMonth()
    {
        if (selectedMonth != default(DateTime))
        {
            var monthYear = selectedMonth.ToString().Split("-");
            var month = int.Parse(monthYear[1]);
            var year = int.Parse(monthYear[0]);

            await GetRevenueByPeriod("Month", $"{month}-{year}");
        }
    }

    private async Task GetRevenueByPeriod(string periodType, string periodValue)
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            totalRevenue = await Http.GetFromJsonAsync<decimal?>($"api/product/GetRevenueBy{periodType}/{periodValue}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi lấy dữ liệu doanh thu theo {periodType.ToLower()}";
            Console.WriteLine($"Lỗi: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ExportToExcel()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            var response = await Http.GetAsync("api/product/ExportProductsToExcel");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsByteArrayAsync();
                var fileName = "Products.xlsx";

                // Gọi JavaScript để tải file xuống
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", content);
            }
            else
            {
                errorMessage = "Không thể xuất file Excel.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi xuất file Excel: {ex.Message}";
            Console.WriteLine($"Lỗi khi xuất file Excel: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private static DateTime FirstDateOfWeekISO8601(int year, int weekOfYear)
    {
        var jan1 = new DateTime(year, 1, 1);
        var daysOffset = (int)DayOfWeek.Monday - (int)jan1.DayOfWeek;
        if (daysOffset < 0) daysOffset += 7;
        var firstMonday = jan1.AddDays(daysOffset);
        return firstMonday.AddDays((weekOfYear - 1) * 7);
    }

    public class Product
    {
        public int IDProduct { get; set; }
        public string Name { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
        public string Status { get; set; }
    }
}
