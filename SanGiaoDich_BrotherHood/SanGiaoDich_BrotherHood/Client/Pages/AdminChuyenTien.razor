@using SanGiaoDich_BrotherHood.Shared.Models
@inject NavigationManager NavigationManager
@inject HttpClient http
@inject IJSRuntime jsruntime
@page "/Admin/ChuyenTien"
@layout AdminLayout

<h3 class="text-center my-4">Danh Sách Yêu Cầu Rút Tiền</h3>

@if (!IsLoggedIn)
{
    <p class="text-center text-danger">Bạn chưa đăng nhập. Đang chuyển hướng đến trang đăng nhập...</p>
}
else
{
    <div class="container mt-4">
        <div class="card shadow-sm">
            <div class="card-body">
                <table class="table table-striped table-hover">
                    <thead class="thead-light">
                        <tr>
                            <th>Số Tiền</th>
                            <th>Ngày Tạo</th>
                            <th>Ngân Hàng</th>
                            <th>Trạng Thái</th>
                            <th>Người Dùng</th>
                            <th>Số Tài Khoản</th>
                            <th>Hành Động</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Withdrawals != null && Withdrawals.Any())
                        {
                            @foreach (var item in Withdrawals)
                            {
                                <tr>
                                    <td>@item.Amount.ToString("N0")</td>
                                    <td>@item.CreatedDate.ToString("dd/MM/yyyy")</td>
                                    <td>@item.Bank</td>
                                    <td><span class="badge @GetStatusClass(item.Status)">@item.Status</span></td>
                                    <td>@item.FullName</td>
                                    <td>@item.AccountNumber</td>
                                    <td>
                                        @if (item.Status == "Chưa thanh toán")
                                        {
                                            <button class="btn btn-success btn-sm" @onclick="() => ConfirmWithdrawal(item.PaymentReqID)">
                                                <i class="fas fa-check-circle"></i> Xác Nhận
                                            </button>
                                            <button class="btn btn-danger btn-sm" @onclick="() => OpenCancelModal(item.PaymentReqID)">
                                                <i class="fas fa-times-circle"></i> Hủy
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center">Không có yêu cầu rút tiền nào.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger mt-4" role="alert">
        @ErrorMessage
    </div>
}

@if (ShowCancelModal)
{
    <div class="modal show" tabindex="-1" style="display: block;" aria-labelledby="cancelModalLabel" aria-hidden="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cancelModalLabel">Nhập lý do hủy</h5>
                    <button type="button" class="btn-close" @onclick="CloseCancelModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <textarea class="form-control" @bind="CancelReason" rows="4" placeholder="Nhập lý do hủy..."></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCancelModal">Đóng</button>
                    <button type="button" class="btn btn-danger" @onclick="() => SubmitCancelWithdrawal(CancelRequestID)">Hủy Yêu Cầu</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Withdrawal_Infomation> Withdrawals = new();
    private string ErrorMessage;
    private bool IsLoggedIn { get; set; } = true;

    // Modal state and reason
    private bool ShowCancelModal { get; set; } = false;
    private string CancelReason { get; set; }
    private int CancelRequestID { get; set; }

    private async Task ConfirmWithdrawal(int id)
    {
        await UpdateWithdrawalStatus(id, "Đã xác nhận");
        await NotifyUserAboutWithdrawal(id, "đã xác nhận");
    }

    private void OpenCancelModal(int id)
    {
        CancelRequestID = id;
        CancelReason = string.Empty; // Reset the reason
        ShowCancelModal = true;
    }

    private void CloseCancelModal()
    {
        ShowCancelModal = false;
    }

    private async Task SubmitCancelWithdrawal(int id)
    {
        if (string.IsNullOrEmpty(CancelReason))
        {
            ErrorMessage = "Vui lòng nhập lý do hủy.";
            return;
        }

        // Cập nhật trạng thái rút tiền
        await UpdateWithdrawalStatus(id, "Đã hủy");

        // Gửi email thông báo kèm theo lý do hủy
        await NotifyUserAboutWithdrawalWithReason(id, "đã hủy", CancelReason);

        // Đóng modal sau khi thực hiện thành công
        CloseCancelModal();
    }

    private async Task UpdateWithdrawalStatus(int id, string status)
    {
        try
        {
            var response = await http.PutAsJsonAsync<Withdrawal_Infomation>($"api/payment/update-withdrawal/{id}/{status}", null);

            if (response.IsSuccessStatusCode)
            {
                await LoadWithdrawals();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Lỗi: {error}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Exception: {ex.Message}";
        }
    }

    private async Task LoadWithdrawals()
    {
        try
        {
            Withdrawals = await http.GetFromJsonAsync<List<Withdrawal_Infomation>>("api/payment/withdrawals");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Exception: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadWithdrawals();
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Đã xác nhận" => "bg-success text-white",
            "Đã hủy" => "bg-danger text-white",
            "Chưa thanh toán" => "bg-warning text-dark",
            _ => "bg-secondary text-white"
        };
    }

    private async Task NotifyUserAboutWithdrawal(int id, string status)
    {
        var withdrawal = Withdrawals.FirstOrDefault(w => w.PaymentReqID == id);
        if (withdrawal != null)
        {
            // Lấy thông tin tài khoản người dùng từ API GetAccountInfoByName
            var userResponse = await http.GetFromJsonAsync<User>("api/user/GetAccountInfoByName/" + withdrawal.UserName);

            if (userResponse != null)
            {
                // Gửi email thông báo cho người dùng
                await SendEmailNotification(userResponse.Email, status);
            }
            else
            {
                ErrorMessage = "Không thể lấy thông tin người dùng.";
            }
        }
        else
        {
            ErrorMessage = "Không tìm thấy yêu cầu rút tiền.";
        }
    }

    private async Task NotifyUserAboutWithdrawalWithReason(int id, string status, string reason)
    {
        var withdrawal = Withdrawals.FirstOrDefault(w => w.PaymentReqID == id);
        if (withdrawal != null)
        {
            // Lấy thông tin tài khoản người dùng từ API GetAccountInfoByName
            var userResponse = await http.GetFromJsonAsync<User>("api/user/GetAccountInfoByName/" + withdrawal.UserName);

            if (userResponse != null)
            {
                // Gửi email thông báo kèm theo lý do hủy
                await SendEmailNotificationWithReason(userResponse.Email, status, reason);
            }
            else
            {
                ErrorMessage = "Không thể lấy thông tin người dùng.";
            }
        }
        else
        {
            ErrorMessage = "Không tìm thấy yêu cầu rút tiền.";
        }
    }

    private async Task SendEmailNotification(string email, string status)
    {
        if (!IsValidEmail(email))
        {
            ErrorMessage = "Địa chỉ email không hợp lệ.";
            return;
        }

        var emailContent = new EmailRequest
            {
                To = email,
                Subject = "Thông báo về yêu cầu rút tiền",
                Body = $"Xin chào,\n\n" +
                           $"Chúng tôi xin thông báo rằng yêu cầu rút tiền của bạn đã được {status}.\n\n" +
                           "Vui lòng kiểm tra lại thông tin tài khoản và các chi tiết liên quan. Nếu có bất kỳ thắc mắc nào, xin vui lòng liên hệ với chúng tôi.\n\n" +
                           "Trân trọng,\nĐội ngũ hỗ trợ"
            };

        await SendEmail(emailContent);
    }

    private async Task SendEmailNotificationWithReason(string email, string status, string reason)
    {
        if (!IsValidEmail(email))
        {
            ErrorMessage = "Địa chỉ email không hợp lệ.";
            return;
        }

        var emailContent = new EmailRequest
            {
                To = email,
                Subject = "Thông báo về yêu cầu rút tiền",
                Body = $"Xin chào,\n\n" +
                           $"Chúng tôi xin thông báo rằng yêu cầu rút tiền của bạn đã được {status}.\n" +
                           $"Lý do: {reason}\n\n" +
                           "Vui lòng kiểm tra lại thông tin tài khoản và các chi tiết liên quan. Nếu có bất kỳ thắc mắc nào, xin vui lòng liên hệ với chúng tôi.\n\n" +
                           "Trân trọng,\nĐội ngũ hỗ trợ"
            };

        await SendEmail(emailContent);
    }


    private async Task SendEmail(EmailRequest emailContent)
    {
        try
        {
            var response = await http.PostAsJsonAsync("api/email/SendEmail", emailContent);

            if (response.IsSuccessStatusCode)
            {
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Lỗi gửi email: {error}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Exception gửi email: {ex.Message}";
        }
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var mailAddress = new System.Net.Mail.MailAddress(email);
            return mailAddress.Address == email;
        }
        catch
        {
            return false;
        }
    }

    public class EmailRequest
    {
        public string To { get; set; }
        public string Subject { get; set; }
        public string Body { get; set; }
    }

    public class User
    {
        public string UserName { get; set; }
        public string Email { get; set; }
        public string FullName { get; set; }
    }
}
