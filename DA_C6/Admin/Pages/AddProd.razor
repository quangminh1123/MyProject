@page "/AddProdPage"
@using Admin.Services
@using Admin.Model
@using System.IO
@inject ProductResponse productResponse
@inject SupplierResponse supplierResponse
@inject CategoryResponse categoryResponse
@inject NavigationManager navigation
<style>
    .custom-select {
        border-radius: 8px;
        background-color: #ffffff;
        border: 1px solid #ced4da;
        padding: 0.375rem 1.75rem 0.375rem 0.75rem;
        appearance: none;
    }</style>
<h3 class="mb-4">Thêm sản phẩm mới</h3>
<div class="container shadow p-4 rounded bg-light">
    <EditForm Model="newProduct" OnValidSubmit="HandleValidSubmit" class="needs-validation" novalidate>
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        <div class="mb-3">
            <label for="name" class="form-label">Tên sản phẩm</label>
            <InputText class="form-control" id="name" @bind-Value="newProduct.Name" required />
            <div class="invalid-feedback">Vui lòng nhập tên sản phẩm.</div>
        </div>

        <div class="mb-3">
            <label for="price" class="form-label">Giá</label>
            <InputNumber class="form-control" id="price" @bind-Value="newProduct.Price" required />
            <div class="invalid-feedback">Vui lòng nhập giá sản phẩm.</div>
        </div>

        <div class="mb-3">
            <label for="image" class="form-label">Ảnh</label>
            <InputFile id="image" OnChange="HandleImageChange" class="form-control" />
        </div>

        <div class="mb-3">
            <label for="status" class="form-label">Trạng thái</label>
            <InputSelect id="status" @bind-Value="newProduct.Status" class="form-select custom-select" required>
                <option value="">Chọn trạng thái sản phẩm</option>
                <option value="Bán">Bán</option>
                <option value="Ngừng bán">Ngừng bán</option>
            </InputSelect>
            <div class="invalid-feedback">Vui lòng chọn trạng thái sản phẩm.</div>
        </div>

        <div class="mb-3">
            <label for="supplier" class="form-label">Nhà cung ứng</label>
            <InputSelect id="supplier" @bind-Value="newProduct.IDSupplier" class="form-select custom-select" required>
                <option value="">Chọn nhà cung ứng</option>
                @if (supplierItems != null)
                {
                    @foreach (var sup in supplierItems)
                    {
                        <option value="@sup.IDSupplier">@sup.Name</option>
                    }
                }
            </InputSelect>
            <div class="invalid-feedback">Vui lòng chọn nhà cung ứng.</div>
        </div>

        <div class="mb-3">
            <label for="category" class="form-label">Loại sản phẩm</label>
            <InputSelect id="category" @bind-Value="newProduct.IDCategory" class="form-select custom-select" required>
                <option value="">Chọn loại sản phẩm</option>
                @if (categoryItems != null)
                {
                    @foreach (var cate in categoryItems)
                    {
                        <option value="@cate.IDCategory">@cate.Name</option>
                    }
                }
            </InputSelect>
            <div class="invalid-feedback">Vui lòng chọn loại sản phẩm.</div>
        </div>


        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save"></i> Thêm sản phẩm
            </button>
            <button type="button" class="btn btn-secondary" @onclick='() => navigation.NavigateTo("/ProductPage")'>
                <i class="fas fa-arrow-left"></i> Quay về danh sách
            </button>
        </div>
    </EditForm>
</div>

@code {
    private IEnumerable<Supplier> supplierItems;
    private IEnumerable<Category> categoryItems;
    private Product newProduct = new Product();
    private IBrowserFile uploadedImage;

    protected override async Task OnInitializedAsync()
    {
        supplierItems = await Task.Run(() => supplierResponse.GetSuppliersAsync());
        categoryItems = await Task.Run(() => categoryResponse.GetCategoriesAsync());
    }

    private async Task HandleValidSubmit()
    {
        if (uploadedImage != null)
        {
            var imageFileName = await SaveImageFile(uploadedImage);
            newProduct.Image = imageFileName;
        }
        else
        {
            newProduct.Image = "default-image.jpg"; // Giá trị mặc định nếu không có ảnh tải lên
        }

        await productResponse.AddAsync(newProduct);
        navigation.NavigateTo("/ProductPage");
    }

    private void HandleImageChange(InputFileChangeEventArgs e)
    {
        uploadedImage = e.File;
    }

    private async Task<string> SaveImageFile(IBrowserFile file)
    {
        var fileName = file.Name;
        var filePath = Path.Combine("wwwroot/Image_Product", fileName);

        using (var stream = new FileStream(filePath, FileMode.Create))
        {
            await file.OpenReadStream().CopyToAsync(stream);
        }

        return $"Image_Product/{fileName}";
    }
}
