@page "/login"
@using Blazor.Shared.Model
@using System.ComponentModel.DataAnnotations
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<style>
    .alert {
        border-radius: 0.5rem;
        padding: 1rem;
        font-size: 1rem;
        margin-bottom: 1rem;
    }

    .alert-danger {
        background-color: #dc3545;
        color: #ffffff;
    }

    .alert-success {
        background-color: #28a745;
        color: #ffffff;
    }
</style>
<div class="container">
    <div class="row justify-content-center mt-5 mb-5">
        <div class="col-md-6">
            <div class="form-container p-4 rounded bg-white shadow-sm">
                <h2 class="text-center mb-4">Đăng nhập</h2>
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success" role="alert">
                        @successMessage
                    </div>
                }
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }

                <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="UserName" class="form-label">Tên tài khoản</label>
                        <InputText id="UserName" class="form-control rounded-pill" @bind-Value="loginModel.UserName" placeholder="Nhập tên tài khoản" />
                        <ValidationMessage For="@(() => loginModel.UserName)" />
                    </div>
                    <div class="mb-3">
                        <label for="Password" class="form-label">Mật khẩu</label>
                        <div class="input-group">
                            <InputText id="Password" type="password" class="form-control rounded-start" @bind-Value="loginModel.Password" placeholder="Nhập mật khẩu" />
                            <button type="button" class="btn btn-outline-secondary rounded-end" id="togglePassword" onclick="togglePasswordVisibility()">
                                👁️
                            </button>
                        </div>
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>
                    <button type="submit" class="btn btn-dark btn-block w-100 rounded-pill">Tiếp tục</button>
                    <div class="text-center mt-4 position-relative">
                        <hr class="mt-3">
                        <div class="position-absolute top-50 start-50 translate-middle" style="background-color: white;padding: 0 10px;">Hoặc</div>
                    </div>
                    <div class="text-center mt-3">
                        <a href="forgotPass" class="text-primary">Quên mật khẩu?</a>
                    </div>
                    <div class="text-center mt-3">
                        <a @onclick="LoginWithGoogle" class="btn btn-light btn-block rounded-pill border w-100">Đăng nhập bằng Google</a>
                    </div>
                    <div class="text-center mt-3">
                        Bạn mới biết đến NEXTON? <a class="text-primary" href="Pages/Register">Đăng ký tài khoản</a>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<script>
    function togglePasswordVisibility() {
        var passwordField = document.getElementById('Password');
        var toggleBtn = document.getElementById('togglePassword');

        if (passwordField.type === 'password') {
            passwordField.type = 'text';
            toggleBtn.innerHTML = '🙈';
        } else {
            passwordField.type = 'password';
            toggleBtn.innerHTML = '👁️';
        }
    }
</script>
@code {
    public class AccountLogin
    {
        [Required(ErrorMessage = "Tên tài khoản không được bỏ trống.")]
        public string UserName { get; set; }

        [Required(ErrorMessage = "Mật khẩu không được bỏ trống.")]
        public string Password { get; set; }
    }

    private AccountLogin loginModel = new AccountLogin();
    private string errorMessage;
    private string successMessage;

    private async Task HandleLogin()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/account/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var account = await response.Content.ReadFromJsonAsync<Account>();
                if (account.Role == "Banned")
                {
                    errorMessage = "Tài khoản của bạn đã bị khóa. Vui lòng liên hệ với quản trị viên.";
                    successMessage = null;
                    await ClearErrorMessageAfterDelay();
                    return;
                }
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "LoggedInUser", loginModel.UserName);
                successMessage = "Đăng nhập thành công!";
                errorMessage = null;
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = "Tài khoản hoặc mật khẩu không đúng";
                successMessage = null;
                await ClearErrorMessageAfterDelay();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Đã xảy ra lỗi: " + ex.Message;
            successMessage = null;
            await ClearErrorMessageAfterDelay();
        }
    }

    private async Task ClearErrorMessageAfterDelay()
    {
        await Task.Delay(3000);
        errorMessage = null;
        StateHasChanged();
    }

    private void LoginWithGoogle()
    {
        var googleAuthUrl = "https://localhost:44305/api/Account/signin-google"; 
        NavigationManager.NavigateTo(googleAuthUrl, true);
    }
}