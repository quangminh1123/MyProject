@page "/Pages/NextRegister/{Username}/{Password}"
@using Blazor.Shared.Model
@using System.Net.Http.Json
@using System.Security.Cryptography
@using System.Text
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigation

<style>
    .registration-form {
        max-width: 400px;
        margin: 0 auto;
    }

    .form-group {
        margin-bottom: 20px;
    }

    label {
        display: block;
        margin-bottom: 5px;
    }

    input[type="text"],
    input[type="email"],
    input[type="tel"],
    select {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }
</style>

<ol class="breadcrumb bg-transparent">
    <li class="breadcrumb-item"><a href="#">Trang chủ</a></li>
    <li class="breadcrumb-item active">Đăng ký tài khoản</li>
    <li class="breadcrumb-item active" aria-current="page">Xác nhận thông tin</li>
</ol>

<EditForm Model="@account">
    <DataAnnotationsValidator />
    <div class="registration-form mb-4" id="frm">
        <div class="text-center mb-5">
            <h3>Nhập thông tin cá nhân</h3>
        </div>

        <div class="form-group">
            <InputText @bind-Value="account.UserName" id="username" class="form-control" readonly hidden />
            <InputText @bind-Value="account.Password" id="password" class="form-control" readonly hidden />
            <InputText @bind-Value="account.Role" id="password" class="form-control" readonly hidden />
        </div>

        <div class="form-group">
            <label class="fw-bolder" for="hoTen">Họ và tên</label>
            <InputText @bind-Value="account.Name" placeholder="Họ và tên" class="form-control" />
            <small class="form-text text-muted">Ví dụ: Nguyễn Văn A</small>
            <ValidationMessage For="@(() => account.Name)" />
        </div>

        <div class="form-group">
            <label class="fw-bolder" for="soDienThoai">Số điện thoại</label>
            <InputText @bind-Value="@account.Phone" type="tel" placeholder="Số điện thoai" class="form-control" />
            <small class="form-text text-muted">Ví dụ: 0987654321</small>
            <ValidationMessage For="@(() => account.Phone)" />
        </div>

        <div class="form-group">
            <label class="fw-bolder">Địa chỉ</label>
            <InputText @bind-Value="account.Address" placeholder="Địa chỉ" class="form-control" />
            <small class="form-text text-muted">Ví dụ: Số 123, đường ABC, quận XYZ</small>
            <ValidationMessage For="@(() => account.Address)" />
        </div>

        <div class="form-group">
            <label class="fw-bolder" for="gioiTinh">Giới tính</label>
            <InputSelect @bind-Value="account.Gender" id="gioiTinh" class="form-control">
                <option value="" hidden>Giới tính</option>
                <option value="Nam">Nam</option>
                <option value="Nữ">Nữ</option>
            </InputSelect>
            <small class="form-text text-muted">Vui lòng chọn giới tính của bạn.</small>
            <ValidationMessage For="@(() => account.Gender)" />
        </div>

        <div class="form-group">
            <label class="fw-bolder" for="email">Email</label>
            <InputText @bind-Value="@account.Email" type="email" placeholder="Email" class="form-control" />
            <small class="form-text text-muted">Ví dụ: example@example.com</small>
            <ValidationMessage For="@(() => account.Email)" />
            @if (errorEmailExit != null)
            {
                <br/>
                <span class="text-danger">@errorEmailExit</span>
            }
        </div>
        <div class="form-check mb-3">
            <input type="checkbox" @bind-value="checKed" class="form-check-input" id="checkbox">
            <label class="form-check-label" for="checkbox">Tôi đồng ý với <a href="#">Chính sách và điều khoản</a></label>
            @if (!string.IsNullOrEmpty(errorChecked))
            {
                <br />
                <span class="text-danger">@errorChecked</span>
            }
        </div>
        <div>
            <button type="submit" class="btn btn-dark w-100 rounded-pill" @onclick="SubmitForm">Đăng ký tài khoản</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public string Username { get; set; }
    [Parameter]
    public string Password { get; set; }
    private Account account = new Account();
    private string errorEmailExit = null;
    private bool checKed = false;
    private string errorChecked;


    protected override void OnParametersSet()
    {
        account.UserName = Username;
        account.Password = Password;
        account.Role = "Member";
    }

    private async Task SubmitForm()
    {
        var emailExit = (await http.GetFromJsonAsync<List<Account>>("api/Account/GetAll")).FirstOrDefault(x => x.Email == account.Email);
        if (!checKed)
        {
            errorChecked = "Bạn cần đồng ý với chính sách và điều khoản";
            return;
        }
        else
        {
            errorChecked = null;
        }

        if (emailExit != null)
        {
            errorEmailExit = "Email đã tồn tại";
            return;
        }
        else
            errorEmailExit = null;

        if (string.IsNullOrEmpty(account.Name) || string.IsNullOrEmpty(account.Phone) || string.IsNullOrEmpty(account.Address) || string.IsNullOrEmpty(account.Gender) || string.IsNullOrEmpty(account.Email))
        {
           
        }
        else
        {
            try
            {
                errorEmailExit = null;
                var response = await http.PostAsJsonAsync("api/Account/Add", account);

                if (response.IsSuccessStatusCode)
                {                    
                    await js.InvokeVoidAsync("setLocalStorageItem", "LoggedInUser", account.UserName);
                    navigation.NavigateTo("/", forceLoad: true);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error:{ex}");
            }
            
        }
    }
}

<script>
    function setLocalStorageItem(key, value) {
        localStorage.setItem(key, value);
    }
</script>